
BT2_2113527.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003868  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003a08  08003a08  00004a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a64  08003a64  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a68  08003a68  00004a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045e0  2000000c  08003a78  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045ec  08003a78  000055ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008151  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c29  00000000  00000000  0000d18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0000edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073d  00000000  00000000  0000f770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013490  00000000  00000000  0000fead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009477  00000000  00000000  0002333d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007002f  00000000  00000000  0002c7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002784  00000000  00000000  0009c828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0009efac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039f0 	.word	0x080039f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	080039f0 	.word	0x080039f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 0307 	and.w	r3, r3, #7
 80004ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800050c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000512:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	60d3      	str	r3, [r2, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800052c:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <__NVIC_GetPriorityGrouping+0x18>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	f003 0307 	and.w	r3, r3, #7
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	2b00      	cmp	r3, #0
 8000554:	db0b      	blt.n	800056e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 021f 	and.w	r2, r3, #31
 800055c:	4907      	ldr	r1, [pc, #28]	@ (800057c <__NVIC_EnableIRQ+0x38>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	095b      	lsrs	r3, r3, #5
 8000564:	2001      	movs	r0, #1
 8000566:	fa00 f202 	lsl.w	r2, r0, r2
 800056a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000e100 	.word	0xe000e100

08000580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	6039      	str	r1, [r7, #0]
 800058a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db0a      	blt.n	80005aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	490c      	ldr	r1, [pc, #48]	@ (80005cc <__NVIC_SetPriority+0x4c>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	0112      	lsls	r2, r2, #4
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	440b      	add	r3, r1
 80005a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a8:	e00a      	b.n	80005c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4908      	ldr	r1, [pc, #32]	@ (80005d0 <__NVIC_SetPriority+0x50>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	3b04      	subs	r3, #4
 80005b8:	0112      	lsls	r2, r2, #4
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	440b      	add	r3, r1
 80005be:	761a      	strb	r2, [r3, #24]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	@ 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	f1c3 0307 	rsb	r3, r3, #7
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf28      	it	cs
 80005f2:	2304      	movcs	r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3304      	adds	r3, #4
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d902      	bls.n	8000604 <NVIC_EncodePriority+0x30>
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3b03      	subs	r3, #3
 8000602:	e000      	b.n	8000606 <NVIC_EncodePriority+0x32>
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	401a      	ands	r2, r3
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43d9      	mvns	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	4313      	orrs	r3, r2
         );
}
 800062e:	4618      	mov	r0, r3
 8000630:	3724      	adds	r7, #36	@ 0x24
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <LL_RCC_HSI_Enable+0x1c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <LL_RCC_HSI_Enable+0x1c>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <LL_RCC_HSI_IsReady+0x20>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f003 0302 	and.w	r3, r3, #2
 8000668:	2b02      	cmp	r3, #2
 800066a:	bf0c      	ite	eq
 800066c:	2301      	moveq	r3, #1
 800066e:	2300      	movne	r3, #0
 8000670:	b2db      	uxtb	r3, r3
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	40023800 	.word	0x40023800

08000680 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4904      	ldr	r1, [pc, #16]	@ (80006a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000696:	4313      	orrs	r3, r2
 8000698:	600b      	str	r3, [r1, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <LL_RCC_SetSysClkSource+0x24>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f023 0203 	bic.w	r2, r3, #3
 80006bc:	4904      	ldr	r1, [pc, #16]	@ (80006d0 <LL_RCC_SetSysClkSource+0x24>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	608b      	str	r3, [r1, #8]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40023800 	.word	0x40023800

080006d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <LL_RCC_GetSysClkSource+0x18>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f003 030c 	and.w	r3, r3, #12
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <LL_RCC_SetAHBPrescaler+0x24>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000700:	4904      	ldr	r1, [pc, #16]	@ (8000714 <LL_RCC_SetAHBPrescaler+0x24>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	608b      	str	r3, [r1, #8]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000728:	4904      	ldr	r1, [pc, #16]	@ (800073c <LL_RCC_SetAPB1Prescaler+0x24>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	608b      	str	r3, [r1, #8]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800

08000740 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <LL_RCC_SetAPB2Prescaler+0x24>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000750:	4904      	ldr	r1, [pc, #16]	@ (8000764 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4313      	orrs	r3, r2
 8000756:	608b      	str	r3, [r1, #8]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800

08000768 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <LL_RCC_SetTIMPrescaler+0x28>)
 8000772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000776:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800077a:	4905      	ldr	r1, [pc, #20]	@ (8000790 <LL_RCC_SetTIMPrescaler+0x28>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40023800 	.word	0x40023800

08000794 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800079e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007a0:	4907      	ldr	r1, [pc, #28]	@ (80007c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4013      	ands	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007d0:	4907      	ldr	r1, [pc, #28]	@ (80007f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800

080007f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000800:	4907      	ldr	r1, [pc, #28]	@ (8000820 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <LL_APB2_GRP1_EnableClock+0x2c>)
 800080a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4013      	ands	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40023800 	.word	0x40023800

08000824 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <LL_FLASH_SetLatency+0x24>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f023 0207 	bic.w	r2, r3, #7
 8000834:	4904      	ldr	r1, [pc, #16]	@ (8000848 <LL_FLASH_SetLatency+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	600b      	str	r3, [r1, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023c00 	.word	0x40023c00

0800084c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <LL_FLASH_GetLatency+0x18>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0307 	and.w	r3, r3, #7
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023c00 	.word	0x40023c00

08000868 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000878:	4904      	ldr	r1, [pc, #16]	@ (800088c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4313      	orrs	r3, r2
 800087e:	600b      	str	r3, [r1, #0]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40007000 	.word	0x40007000

08000890 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	60da      	str	r2, [r3, #12]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	615a      	str	r2, [r3, #20]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691a      	ldr	r2, [r3, #16]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4013      	ands	r3, r2
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	bf0c      	ite	eq
 80008f4:	2301      	moveq	r3, #1
 80008f6:	2300      	movne	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	619a      	str	r2, [r3, #24]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	041a      	lsls	r2, r3, #16
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	619a      	str	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	4013      	ands	r3, r2
 8000956:	041a      	lsls	r2, r3, #16
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	43d9      	mvns	r1, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	400b      	ands	r3, r1
 8000960:	431a      	orrs	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	619a      	str	r2, [r3, #24]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800097a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800097e:	f7ff ff39 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000982:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000986:	f7ff ff1d 	bl	80007c4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098a:	2003      	movs	r0, #3
 800098c:	f7ff fda8 	bl	80004e0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000990:	f7ff fdca 	bl	8000528 <__NVIC_GetPriorityGrouping>
 8000994:	4603      	mov	r3, r0
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe1a 	bl	80005d4 <NVIC_EncodePriority>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff fdea 	bl	8000580 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f84a 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f8e2 	bl	8000b78 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009b4:	f000 f880 	bl	8000ab8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  queue_led = xQueueCreate(5, sizeof(led_command_t));
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	2005      	movs	r0, #5
 80009be:	f001 f975 	bl	8001cac <xQueueGenericCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a16      	ldr	r2, [pc, #88]	@ (8000a20 <main+0xac>)
 80009c6:	6013      	str	r3, [r2, #0]

  data_uart_1.position_uart = 0;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <main+0xb0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	729a      	strb	r2, [r3, #10]
  data_uart_1.uart_flag = 0;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <main+0xb0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	72da      	strb	r2, [r3, #11]
  state = STATE_LED_OFF;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <main+0xb4>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	701a      	strb	r2, [r3, #0]

  xTaskCreate(LED_Task, "LED_Task",configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2302      	movs	r3, #2
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	4911      	ldr	r1, [pc, #68]	@ (8000a2c <main+0xb8>)
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <main+0xbc>)
 80009ea:	f001 fc56 	bl	800229a <xTaskCreate>
  xTaskCreate(UART_Task, "UART_Task",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80009ee:	2300      	movs	r3, #0
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2301      	movs	r3, #1
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	490e      	ldr	r1, [pc, #56]	@ (8000a34 <main+0xc0>)
 80009fc:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <main+0xc4>)
 80009fe:	f001 fc4c 	bl	800229a <xTaskCreate>
  xTaskCreate(Switch_Task, "SW task",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000a02:	2300      	movs	r3, #0
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	2301      	movs	r3, #1
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	490b      	ldr	r1, [pc, #44]	@ (8000a3c <main+0xc8>)
 8000a10:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <main+0xcc>)
 8000a12:	f001 fc42 	bl	800229a <xTaskCreate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000a16:	f001 fdcd 	bl	80025b4 <vTaskStartScheduler>
  while (1)
 8000a1a:	bf00      	nop
 8000a1c:	e7fd      	b.n	8000a1a <main+0xa6>
 8000a1e:	bf00      	nop
 8000a20:	20000028 	.word	0x20000028
 8000a24:	20000030 	.word	0x20000030
 8000a28:	2000002c 	.word	0x2000002c
 8000a2c:	08003a08 	.word	0x08003a08
 8000a30:	08000be5 	.word	0x08000be5
 8000a34:	08003a14 	.word	0x08003a14
 8000a38:	08000c41 	.word	0x08000c41
 8000a3c:	08003a20 	.word	0x08003a20
 8000a40:	08000d2d 	.word	0x08000d2d

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff feeb 	bl	8000824 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000a4e:	bf00      	nop
 8000a50:	f7ff fefc 	bl	800084c <LL_FLASH_GetLatency>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1fa      	bne.n	8000a50 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a5a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000a5e:	f7ff ff03 	bl	8000868 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a62:	2010      	movs	r0, #16
 8000a64:	f7ff fe0c 	bl	8000680 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000a68:	f7ff fde8 	bl	800063c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a6c:	bf00      	nop
 8000a6e:	f7ff fdf5 	bl	800065c <LL_RCC_HSI_IsReady>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d1fa      	bne.n	8000a6e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fe39 	bl	80006f0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fe4a 	bl	8000718 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fe5b 	bl	8000740 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fe0e 	bl	80006ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000a90:	bf00      	nop
 8000a92:	f7ff fe1f 	bl	80006d4 <LL_RCC_GetSysClkSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1fa      	bne.n	8000a92 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <SystemClock_Config+0x70>)
 8000a9e:	f000 ffe3 	bl	8001a68 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000aa2:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <SystemClock_Config+0x70>)
 8000aa4:	f000 ffee 	bl	8001a84 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fe5d 	bl	8000768 <LL_RCC_SetTIMPrescaler>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	00f42400 	.word	0x00f42400

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	@ 0x38
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000ae2:	2010      	movs	r0, #16
 8000ae4:	f7ff fe86 	bl	80007f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fe53 	bl	8000794 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000aee:	23c0      	movs	r3, #192	@ 0xc0
 8000af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4819      	ldr	r0, [pc, #100]	@ (8000b70 <MX_USART1_UART_Init+0xb8>)
 8000b0c:	f000 fb0a 	bl	8001124 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000b10:	f7ff fd0a 	bl	8000528 <__NVIC_GetPriorityGrouping>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd5a 	bl	80005d4 <NVIC_EncodePriority>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4619      	mov	r1, r3
 8000b24:	2025      	movs	r0, #37	@ 0x25
 8000b26:	f7ff fd2b 	bl	8000580 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000b2a:	2025      	movs	r0, #37	@ 0x25
 8000b2c:	f7ff fd0a 	bl	8000544 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b30:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b34:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b42:	230c      	movs	r3, #12
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <MX_USART1_UART_Init+0xbc>)
 8000b56:	f000 ff09 	bl	800196c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <MX_USART1_UART_Init+0xbc>)
 8000b5c:	f7ff fea8 	bl	80008b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_USART1_UART_Init+0xbc>)
 8000b62:	f7ff fe95 	bl	8000890 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3738      	adds	r7, #56	@ 0x38
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40011000 	.word	0x40011000

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff fe00 	bl	8000794 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f7ff fdfd 	bl	8000794 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <MX_GPIO_Init+0x68>)
 8000b9e:	f7ff fec0 	bl	8000922 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <MX_GPIO_Init+0x68>)
 8000bb4:	f000 fab6 	bl	8001124 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_GPIO_Init+0x68>)
 8000bd2:	f000 faa7 	bl	8001124 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020000 	.word	0x40020000

08000be4 <LED_Task>:

/* USER CODE BEGIN 4 */
static void LED_Task( void *pvParameters )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  led_command_t	received_led_command;
  BaseType_t	ret;
	while(1)
	{
		ret = xQueueReceive(queue_led, &received_led_command, portMAX_DELAY);
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <LED_Task+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f107 010b 	add.w	r1, r7, #11
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 f95f 	bl	8001ebc <xQueueReceive>
 8000bfe:	60f8      	str	r0, [r7, #12]
		if(ret == pdPASS)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f2      	bne.n	8000bec <LED_Task+0x8>
		{
			if (received_led_command == LED_ON)
 8000c06:	7afb      	ldrb	r3, [r7, #11]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <LED_Task+0x32>
			{
				LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <LED_Task+0x58>)
 8000c10:	f7ff fe79 	bl	8000906 <LL_GPIO_SetOutputPin>
 8000c14:	e7ea      	b.n	8000bec <LED_Task+0x8>
			}
			else 	if (received_led_command == LED_OFF)
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d104      	bne.n	8000c26 <LED_Task+0x42>
			{
				LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <LED_Task+0x58>)
 8000c20:	f7ff fe7f 	bl	8000922 <LL_GPIO_ResetOutputPin>
 8000c24:	e7e2      	b.n	8000bec <LED_Task+0x8>
			}
			else 	if (received_led_command == LED_TOGGLE)
 8000c26:	7afb      	ldrb	r3, [r7, #11]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d1df      	bne.n	8000bec <LED_Task+0x8>
			{
				LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <LED_Task+0x58>)
 8000c30:	f7ff fe86 	bl	8000940 <LL_GPIO_TogglePin>
		ret = xQueueReceive(queue_led, &received_led_command, portMAX_DELAY);
 8000c34:	e7da      	b.n	8000bec <LED_Task+0x8>
 8000c36:	bf00      	nop
 8000c38:	20000028 	.word	0x20000028
 8000c3c:	40020000 	.word	0x40020000

08000c40 <UART_Task>:
 * function is not being used. This parameter is typically used to pass any additional parameters or
 * data to the task when it is created using FreeRTOS. If you don't have any specific parameters to
 * pass to the task
 */
static void UART_Task( void *pvParameters )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  led_command_t send_led_command;
	while(1)
	{
		if (data_uart_1.uart_flag == 1)
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <UART_Task+0xb4>)
 8000c4a:	7adb      	ldrb	r3, [r3, #11]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d14c      	bne.n	8000cea <UART_Task+0xaa>
		{
		  if (memcmp(data_uart_1.uart_buffer, "ON\r", strlen((char *)data_uart_1.uart_buffer)) == 0)
 8000c50:	4828      	ldr	r0, [pc, #160]	@ (8000cf4 <UART_Task+0xb4>)
 8000c52:	f7ff fac5 	bl	80001e0 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4927      	ldr	r1, [pc, #156]	@ (8000cf8 <UART_Task+0xb8>)
 8000c5c:	4825      	ldr	r0, [pc, #148]	@ (8000cf4 <UART_Task+0xb4>)
 8000c5e:	f002 fe7d 	bl	800395c <memcmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <UART_Task+0x34>
		  {
			send_led_command = LED_ON;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
			state = STATE_LED_ON;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <UART_Task+0xbc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e02a      	b.n	8000cca <UART_Task+0x8a>
		  }
		  else if (memcmp(data_uart_1.uart_buffer, "OFF\r", strlen((char *)data_uart_1.uart_buffer)) == 0)
 8000c74:	481f      	ldr	r0, [pc, #124]	@ (8000cf4 <UART_Task+0xb4>)
 8000c76:	f7ff fab3 	bl	80001e0 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4920      	ldr	r1, [pc, #128]	@ (8000d00 <UART_Task+0xc0>)
 8000c80:	481c      	ldr	r0, [pc, #112]	@ (8000cf4 <UART_Task+0xb4>)
 8000c82:	f002 fe6b 	bl	800395c <memcmp>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <UART_Task+0x58>
		  {
			send_led_command = LED_OFF;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
			state = STATE_LED_OFF;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <UART_Task+0xbc>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e018      	b.n	8000cca <UART_Task+0x8a>
		  }
		  else if (memcmp(data_uart_1.uart_buffer, "TOGGLE\r", strlen((char *)data_uart_1.uart_buffer)) == 0)
 8000c98:	4816      	ldr	r0, [pc, #88]	@ (8000cf4 <UART_Task+0xb4>)
 8000c9a:	f7ff faa1 	bl	80001e0 <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4918      	ldr	r1, [pc, #96]	@ (8000d04 <UART_Task+0xc4>)
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <UART_Task+0xb4>)
 8000ca6:	f002 fe59 	bl	800395c <memcmp>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10c      	bne.n	8000cca <UART_Task+0x8a>
		  {
			send_led_command = LED_TOGGLE;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	73fb      	strb	r3, [r7, #15]
			if(state == STATE_LED_ON) state = STATE_LED_OFF;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <UART_Task+0xbc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d103      	bne.n	8000cc4 <UART_Task+0x84>
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <UART_Task+0xbc>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e002      	b.n	8000cca <UART_Task+0x8a>
			else state = STATE_LED_ON;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <UART_Task+0xbc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
		  }
		  xQueueSend(queue_led,&send_led_command,0);
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <UART_Task+0xc8>)
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	f107 010f 	add.w	r1, r7, #15
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f001 f847 	bl	8001d68 <xQueueGenericSend>
		  data_uart_1.uart_flag = 0;
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <UART_Task+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	72da      	strb	r2, [r3, #11]
		  memset(data_uart_1.uart_buffer, '\0', sizeof(data_uart_1.uart_buffer));
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <UART_Task+0xb4>)
 8000ce6:	f002 fe49 	bl	800397c <memset>
		}
		vTaskDelay(100);
 8000cea:	2064      	movs	r0, #100	@ 0x64
 8000cec:	f001 fbf4 	bl	80024d8 <vTaskDelay>
		if (data_uart_1.uart_flag == 1)
 8000cf0:	e7aa      	b.n	8000c48 <UART_Task+0x8>
 8000cf2:	bf00      	nop
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	08003a28 	.word	0x08003a28
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	08003a2c 	.word	0x08003a2c
 8000d04:	08003a34 	.word	0x08003a34
 8000d08:	20000028 	.word	0x20000028

08000d0c <read_button>:
	}
}

static uint32_t read_button()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

	if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0)) 	return PRESSED;
 8000d10:	2101      	movs	r1, #1
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <read_button+0x1c>)
 8000d14:	f7ff fde2 	bl	80008dc <LL_GPIO_IsInputPinSet>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <read_button+0x16>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <read_button+0x18>
	else 												return RELEASED;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40020000 	.word	0x40020000

08000d2c <Switch_Task>:
static void Switch_Task( void *pvParameters )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	uint32_t		switch_prev_state = read_button();
 8000d34:	f7ff ffea 	bl	8000d0c <read_button>
 8000d38:	6178      	str	r0, [r7, #20]
	led_command_t	Switch_Task_led_command;


	while(1)
	{
		switch_current_state = read_button();
 8000d3a:	f7ff ffe7 	bl	8000d0c <read_button>
 8000d3e:	6138      	str	r0, [r7, #16]
		if (switch_current_state != switch_prev_state)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d03d      	beq.n	8000dc4 <Switch_Task+0x98>
		{
			switch_prev_state = switch_current_state;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	617b      	str	r3, [r7, #20]
			switch (state)
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <Switch_Task+0xa0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d82f      	bhi.n	8000db4 <Switch_Task+0x88>
 8000d54:	a201      	add	r2, pc, #4	@ (adr r2, 8000d5c <Switch_Task+0x30>)
 8000d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5a:	bf00      	nop
 8000d5c:	08000d91 	.word	0x08000d91
 8000d60:	08000d7f 	.word	0x08000d7f
 8000d64:	08000d6d 	.word	0x08000d6d
 8000d68:	08000da3 	.word	0x08000da3
			{
				case STATE_LED_OFF:
					if(switch_current_state == PRESSED)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <Switch_Task+0x4c>
					{
						state = STATE_WAIT_LED_ON;
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <Switch_Task+0xa0>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
					}
					Switch_Task_led_command = LED_OFF;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
					break;
 8000d7c:	e01a      	b.n	8000db4 <Switch_Task+0x88>
				case STATE_WAIT_LED_ON:
					if(switch_current_state == RELEASED)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <Switch_Task+0x5e>
					{
						state = STATE_LED_ON;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <Switch_Task+0xa0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
					}
					Switch_Task_led_command = LED_ON;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
					break;
 8000d8e:	e011      	b.n	8000db4 <Switch_Task+0x88>
				case STATE_LED_ON:
					if(switch_current_state == PRESSED)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d102      	bne.n	8000d9c <Switch_Task+0x70>
					{
						state = STATE_WAIT_LED_OFF;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <Switch_Task+0xa0>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	701a      	strb	r2, [r3, #0]
					}
					Switch_Task_led_command = LED_ON;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
					break;
 8000da0:	e008      	b.n	8000db4 <Switch_Task+0x88>
				case STATE_WAIT_LED_OFF:
					if(switch_current_state == PRESSED)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d102      	bne.n	8000dae <Switch_Task+0x82>
					{
						state = STATE_LED_ON;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <Switch_Task+0xa0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
					}
					Switch_Task_led_command = LED_OFF;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
					break;
 8000db2:	bf00      	nop
			}
			xQueueSend(queue_led,&Switch_Task_led_command,0);
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <Switch_Task+0xa4>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f107 010f 	add.w	r1, r7, #15
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f000 ffd2 	bl	8001d68 <xQueueGenericSend>
		}
		vTaskDelay(10);
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f001 fb87 	bl	80024d8 <vTaskDelay>
		switch_current_state = read_button();
 8000dca:	e7b6      	b.n	8000d3a <Switch_Task+0xe>
 8000dcc:	2000002c 	.word	0x2000002c
 8000dd0:	20000028 	.word	0x20000028

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  UARTStdioIntHandler();
 8000e0e:	f002 fd55 	bl	80038bc <UARTStdioIntHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e40:	f7ff ffea 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f002 fd8f 	bl	800398c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fd81 	bl	8000974 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e80:	08003a6c 	.word	0x08003a6c
  ldr r2, =_sbss
 8000e84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e88:	200045ec 	.word	0x200045ec

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>

08000e8e <LL_GPIO_SetPinMode>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b08b      	sub	sp, #44	@ 0x2c
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	e003      	b.n	8000ec0 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	61fb      	str	r3, [r7, #28]
  return result;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	e003      	b.n	8000eee <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	372c      	adds	r7, #44	@ 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_GPIO_SetPinOutputType>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	fb01 f303 	mul.w	r3, r1, r3
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	605a      	str	r2, [r3, #4]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_GPIO_SetPinSpeed>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	@ 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	613b      	str	r3, [r7, #16]
  return result;
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000f5e:	2320      	movs	r3, #32
 8000f60:	e003      	b.n	8000f6a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	fab3 f383 	clz	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	401a      	ands	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	61fb      	str	r3, [r7, #28]
  return result;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	e003      	b.n	8000f98 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	609a      	str	r2, [r3, #8]
}
 8000fa6:	bf00      	nop
 8000fa8:	372c      	adds	r7, #44	@ 0x2c
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_GPIO_SetPinPull>:
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b08b      	sub	sp, #44	@ 0x2c
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	613b      	str	r3, [r7, #16]
  return result;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	e003      	b.n	8000fe4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	61fb      	str	r3, [r7, #28]
  return result;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001006:	2320      	movs	r3, #32
 8001008:	e003      	b.n	8001012 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	431a      	orrs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	60da      	str	r2, [r3, #12]
}
 8001020:	bf00      	nop
 8001022:	372c      	adds	r7, #44	@ 0x2c
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_GPIO_SetAFPin_0_7>:
{
 800102c:	b480      	push	{r7}
 800102e:	b08b      	sub	sp, #44	@ 0x2c
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	613b      	str	r3, [r7, #16]
  return result;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001052:	2320      	movs	r3, #32
 8001054:	e003      	b.n	800105e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	210f      	movs	r1, #15
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	401a      	ands	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	61fb      	str	r3, [r7, #28]
  return result;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001080:	2320      	movs	r3, #32
 8001082:	e003      	b.n	800108c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	431a      	orrs	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	621a      	str	r2, [r3, #32]
}
 800109a:	bf00      	nop
 800109c:	372c      	adds	r7, #44	@ 0x2c
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_GPIO_SetAFPin_8_15>:
{
 80010a6:	b480      	push	{r7}
 80010a8:	b08b      	sub	sp, #44	@ 0x2c
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	613b      	str	r3, [r7, #16]
  return result;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80010ce:	2320      	movs	r3, #32
 80010d0:	e003      	b.n	80010da <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	210f      	movs	r1, #15
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	401a      	ands	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	61fb      	str	r3, [r7, #28]
  return result;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80010fe:	2320      	movs	r3, #32
 8001100:	e003      	b.n	800110a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	431a      	orrs	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001118:	bf00      	nop
 800111a:	372c      	adds	r7, #44	@ 0x2c
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	617b      	str	r3, [r7, #20]
  return result;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <LL_GPIO_Init+0x2e>
    return 32U;
 800114e:	2320      	movs	r3, #32
 8001150:	e003      	b.n	800115a <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800115c:	e057      	b.n	800120e <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2101      	movs	r1, #1
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	4013      	ands	r3, r2
 800116c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d049      	beq.n	8001208 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d003      	beq.n	8001184 <LL_GPIO_Init+0x60>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10d      	bne.n	80011a0 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	6a39      	ldr	r1, [r7, #32]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fed3 	bl	8000f38 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	461a      	mov	r2, r3
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff feb4 	bl	8000f08 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	461a      	mov	r2, r3
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff02 	bl	8000fb2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d121      	bne.n	80011fa <LL_GPIO_Init+0xd6>
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	60bb      	str	r3, [r7, #8]
  return result;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <LL_GPIO_Init+0xac>
    return 32U;
 80011cc:	2320      	movs	r3, #32
 80011ce:	e003      	b.n	80011d8 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80011d8:	2b07      	cmp	r3, #7
 80011da:	d807      	bhi.n	80011ec <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	461a      	mov	r2, r3
 80011e2:	6a39      	ldr	r1, [r7, #32]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff21 	bl	800102c <LL_GPIO_SetAFPin_0_7>
 80011ea:	e006      	b.n	80011fa <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	461a      	mov	r2, r3
 80011f2:	6a39      	ldr	r1, [r7, #32]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff56 	bl	80010a6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	6a39      	ldr	r1, [r7, #32]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fe43 	bl	8000e8e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	3301      	adds	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1a0      	bne.n	800115e <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3728      	adds	r7, #40	@ 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <LL_RCC_GetSysClkSource>:
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <LL_RCC_GetSysClkSource+0x18>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <LL_RCC_GetAHBPrescaler>:
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <LL_RCC_GetAHBPrescaler+0x18>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <LL_RCC_GetAPB1Prescaler>:
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <LL_RCC_GetAPB2Prescaler>:
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <LL_RCC_PLL_GetN+0x18>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40023800 	.word	0x40023800

080012d0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <LL_RCC_PLL_GetP+0x18>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <LL_RCC_PLL_GetDivider+0x18>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001310:	f000 f820 	bl	8001354 <RCC_GetSystemClockFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f840 	bl	80013a4 <RCC_GetHCLKClockFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f84e 	bl	80013d0 <RCC_GetPCLK1ClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f85a 	bl	80013f8 <RCC_GetPCLK2ClockFreq>
 8001344:	4602      	mov	r2, r0
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60da      	str	r2, [r3, #12]
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800135e:	f7ff ff63 	bl	8001228 <LL_RCC_GetSysClkSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b08      	cmp	r3, #8
 8001366:	d00c      	beq.n	8001382 <RCC_GetSystemClockFreq+0x2e>
 8001368:	2b08      	cmp	r3, #8
 800136a:	d80f      	bhi.n	800138c <RCC_GetSystemClockFreq+0x38>
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <RCC_GetSystemClockFreq+0x22>
 8001370:	2b04      	cmp	r3, #4
 8001372:	d003      	beq.n	800137c <RCC_GetSystemClockFreq+0x28>
 8001374:	e00a      	b.n	800138c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <RCC_GetSystemClockFreq+0x48>)
 8001378:	607b      	str	r3, [r7, #4]
      break;
 800137a:	e00a      	b.n	8001392 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <RCC_GetSystemClockFreq+0x4c>)
 800137e:	607b      	str	r3, [r7, #4]
      break;
 8001380:	e007      	b.n	8001392 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001382:	2008      	movs	r0, #8
 8001384:	f000 f84c 	bl	8001420 <RCC_PLL_GetFreqDomain_SYS>
 8001388:	6078      	str	r0, [r7, #4]
      break;
 800138a:	e002      	b.n	8001392 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <RCC_GetSystemClockFreq+0x48>)
 800138e:	607b      	str	r3, [r7, #4]
      break;
 8001390:	bf00      	nop
  }

  return frequency;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	00f42400 	.word	0x00f42400
 80013a0:	017d7840 	.word	0x017d7840

080013a4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80013ac:	f7ff ff4a 	bl	8001244 <LL_RCC_GetAHBPrescaler>
 80013b0:	4603      	mov	r3, r0
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <RCC_GetHCLKClockFreq+0x28>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	461a      	mov	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	40d3      	lsrs	r3, r2
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08003a44 	.word	0x08003a44

080013d0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80013d8:	f7ff ff42 	bl	8001260 <LL_RCC_GetAPB1Prescaler>
 80013dc:	4603      	mov	r3, r0
 80013de:	0a9b      	lsrs	r3, r3, #10
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	461a      	mov	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	40d3      	lsrs	r3, r2
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	08003a54 	.word	0x08003a54

080013f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001400:	f7ff ff3c 	bl	800127c <LL_RCC_GetAPB2Prescaler>
 8001404:	4603      	mov	r3, r0
 8001406:	0b5b      	lsrs	r3, r3, #13
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <RCC_GetPCLK2ClockFreq+0x24>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	40d3      	lsrs	r3, r2
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08003a54 	.word	0x08003a54

08001420 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001434:	f7ff ff30 	bl	8001298 <LL_RCC_PLL_GetMainSource>
 8001438:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001446:	d003      	beq.n	8001450 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001448:	e005      	b.n	8001456 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800144c:	617b      	str	r3, [r7, #20]
      break;
 800144e:	e005      	b.n	800145c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001452:	617b      	str	r3, [r7, #20]
      break;
 8001454:	e002      	b.n	800145c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001458:	617b      	str	r3, [r7, #20]
      break;
 800145a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d113      	bne.n	800148a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001462:	f7ff ff43 	bl	80012ec <LL_RCC_PLL_GetDivider>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fbb3 f4f2 	udiv	r4, r3, r2
 800146e:	f7ff ff21 	bl	80012b4 <LL_RCC_PLL_GetN>
 8001472:	4603      	mov	r3, r0
 8001474:	fb03 f404 	mul.w	r4, r3, r4
 8001478:	f7ff ff2a 	bl	80012d0 <LL_RCC_PLL_GetP>
 800147c:	4603      	mov	r3, r0
 800147e:	0c1b      	lsrs	r3, r3, #16
 8001480:	3301      	adds	r3, #1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fbb4 f3f3 	udiv	r3, r4, r3
 8001488:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800148a:	693b      	ldr	r3, [r7, #16]
}
 800148c:	4618      	mov	r0, r3
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	00f42400 	.word	0x00f42400
 8001498:	017d7840 	.word	0x017d7840

0800149c <LL_USART_IsEnabled>:
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_USART_SetStopBitsLength>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_USART_SetHWFlowCtrl>:
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	615a      	str	r2, [r3, #20]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_USART_SetBaudRate>:
{
 8001510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001514:	b0c0      	sub	sp, #256	@ 0x100
 8001516:	af00      	add	r7, sp, #0
 8001518:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800151c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8001520:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001524:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800152c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001530:	f040 810c 	bne.w	800174c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001538:	2200      	movs	r2, #0
 800153a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800153e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	1891      	adds	r1, r2, r2
 800154c:	6639      	str	r1, [r7, #96]	@ 0x60
 800154e:	415b      	adcs	r3, r3
 8001550:	667b      	str	r3, [r7, #100]	@ 0x64
 8001552:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001556:	4621      	mov	r1, r4
 8001558:	eb12 0801 	adds.w	r8, r2, r1
 800155c:	4629      	mov	r1, r5
 800155e:	eb43 0901 	adc.w	r9, r3, r1
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800156e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001576:	4690      	mov	r8, r2
 8001578:	4699      	mov	r9, r3
 800157a:	4623      	mov	r3, r4
 800157c:	eb18 0303 	adds.w	r3, r8, r3
 8001580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001584:	462b      	mov	r3, r5
 8001586:	eb49 0303 	adc.w	r3, r9, r3
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800158e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001592:	2200      	movs	r2, #0
 8001594:	469a      	mov	sl, r3
 8001596:	4693      	mov	fp, r2
 8001598:	eb1a 030a 	adds.w	r3, sl, sl
 800159c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800159e:	eb4b 030b 	adc.w	r3, fp, fp
 80015a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80015a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80015ac:	f7fe fe20 	bl	80001f0 <__aeabi_uldivmod>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4b64      	ldr	r3, [pc, #400]	@ (8001748 <LL_USART_SetBaudRate+0x238>)
 80015b6:	fba3 2302 	umull	r2, r3, r3, r2
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	b29b      	uxth	r3, r3
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	b29c      	uxth	r4, r3
 80015c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80015cc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80015d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80015d4:	4642      	mov	r2, r8
 80015d6:	464b      	mov	r3, r9
 80015d8:	1891      	adds	r1, r2, r2
 80015da:	6539      	str	r1, [r7, #80]	@ 0x50
 80015dc:	415b      	adcs	r3, r3
 80015de:	657b      	str	r3, [r7, #84]	@ 0x54
 80015e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80015e4:	4641      	mov	r1, r8
 80015e6:	1851      	adds	r1, r2, r1
 80015e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80015ea:	4649      	mov	r1, r9
 80015ec:	414b      	adcs	r3, r1
 80015ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80015fc:	4659      	mov	r1, fp
 80015fe:	00cb      	lsls	r3, r1, #3
 8001600:	4651      	mov	r1, sl
 8001602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001606:	4651      	mov	r1, sl
 8001608:	00ca      	lsls	r2, r1, #3
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	4603      	mov	r3, r0
 8001610:	4642      	mov	r2, r8
 8001612:	189b      	adds	r3, r3, r2
 8001614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001618:	464b      	mov	r3, r9
 800161a:	460a      	mov	r2, r1
 800161c:	eb42 0303 	adc.w	r3, r2, r3
 8001620:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001628:	2200      	movs	r2, #0
 800162a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800162e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001632:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001636:	460b      	mov	r3, r1
 8001638:	18db      	adds	r3, r3, r3
 800163a:	643b      	str	r3, [r7, #64]	@ 0x40
 800163c:	4613      	mov	r3, r2
 800163e:	eb42 0303 	adc.w	r3, r2, r3
 8001642:	647b      	str	r3, [r7, #68]	@ 0x44
 8001644:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001648:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800164c:	f7fe fdd0 	bl	80001f0 <__aeabi_uldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4611      	mov	r1, r2
 8001656:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <LL_USART_SetBaudRate+0x238>)
 8001658:	fba3 2301 	umull	r2, r3, r3, r1
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	2264      	movs	r2, #100	@ 0x64
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	1acb      	subs	r3, r1, r3
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <LL_USART_SetBaudRate+0x238>)
 800166e:	fba3 2302 	umull	r2, r3, r3, r2
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	b29b      	uxth	r3, r3
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800167e:	b29b      	uxth	r3, r3
 8001680:	4423      	add	r3, r4
 8001682:	b29c      	uxth	r4, r3
 8001684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001688:	2200      	movs	r2, #0
 800168a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800168e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001692:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8001696:	4642      	mov	r2, r8
 8001698:	464b      	mov	r3, r9
 800169a:	1891      	adds	r1, r2, r2
 800169c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800169e:	415b      	adcs	r3, r3
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016a6:	4641      	mov	r1, r8
 80016a8:	1851      	adds	r1, r2, r1
 80016aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80016ac:	4649      	mov	r1, r9
 80016ae:	414b      	adcs	r3, r1
 80016b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80016be:	4659      	mov	r1, fp
 80016c0:	00cb      	lsls	r3, r1, #3
 80016c2:	4651      	mov	r1, sl
 80016c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016c8:	4651      	mov	r1, sl
 80016ca:	00ca      	lsls	r2, r1, #3
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	4642      	mov	r2, r8
 80016d4:	189b      	adds	r3, r3, r2
 80016d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80016da:	464b      	mov	r3, r9
 80016dc:	460a      	mov	r2, r1
 80016de:	eb42 0303 	adc.w	r3, r2, r3
 80016e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80016e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016f0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80016f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80016f8:	460b      	mov	r3, r1
 80016fa:	18db      	adds	r3, r3, r3
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fe:	4613      	mov	r3, r2
 8001700:	eb42 0303 	adc.w	r3, r2, r3
 8001704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800170a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800170e:	f7fe fd6f 	bl	80001f0 <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <LL_USART_SetBaudRate+0x238>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	2164      	movs	r1, #100	@ 0x64
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	3332      	adds	r3, #50	@ 0x32
 800172a:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <LL_USART_SetBaudRate+0x238>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b29b      	uxth	r3, r3
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	b29b      	uxth	r3, r3
 800173a:	4423      	add	r3, r4
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001744:	609a      	str	r2, [r3, #8]
}
 8001746:	e108      	b.n	800195a <LL_USART_SetBaudRate+0x44a>
 8001748:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800174c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001750:	2200      	movs	r2, #0
 8001752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001756:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800175a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800175e:	4642      	mov	r2, r8
 8001760:	464b      	mov	r3, r9
 8001762:	1891      	adds	r1, r2, r2
 8001764:	6239      	str	r1, [r7, #32]
 8001766:	415b      	adcs	r3, r3
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
 800176a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800176e:	4641      	mov	r1, r8
 8001770:	1854      	adds	r4, r2, r1
 8001772:	4649      	mov	r1, r9
 8001774:	eb43 0501 	adc.w	r5, r3, r1
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	00eb      	lsls	r3, r5, #3
 8001782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001786:	00e2      	lsls	r2, r4, #3
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4643      	mov	r3, r8
 800178e:	18e3      	adds	r3, r4, r3
 8001790:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001794:	464b      	mov	r3, r9
 8001796:	eb45 0303 	adc.w	r3, r5, r3
 800179a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800179e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80017b8:	4629      	mov	r1, r5
 80017ba:	008b      	lsls	r3, r1, #2
 80017bc:	4621      	mov	r1, r4
 80017be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017c2:	4621      	mov	r1, r4
 80017c4:	008a      	lsls	r2, r1, #2
 80017c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80017ca:	f7fe fd11 	bl	80001f0 <__aeabi_uldivmod>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4b65      	ldr	r3, [pc, #404]	@ (8001968 <LL_USART_SetBaudRate+0x458>)
 80017d4:	fba3 2302 	umull	r2, r3, r3, r2
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b29b      	uxth	r3, r3
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	b29c      	uxth	r4, r3
 80017e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80017e4:	2200      	movs	r2, #0
 80017e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017ee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80017f2:	4642      	mov	r2, r8
 80017f4:	464b      	mov	r3, r9
 80017f6:	1891      	adds	r1, r2, r2
 80017f8:	61b9      	str	r1, [r7, #24]
 80017fa:	415b      	adcs	r3, r3
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001802:	4641      	mov	r1, r8
 8001804:	1851      	adds	r1, r2, r1
 8001806:	6139      	str	r1, [r7, #16]
 8001808:	4649      	mov	r1, r9
 800180a:	414b      	adcs	r3, r1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800181a:	4659      	mov	r1, fp
 800181c:	00cb      	lsls	r3, r1, #3
 800181e:	4651      	mov	r1, sl
 8001820:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001824:	4651      	mov	r1, sl
 8001826:	00ca      	lsls	r2, r1, #3
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	4603      	mov	r3, r0
 800182e:	4642      	mov	r2, r8
 8001830:	189b      	adds	r3, r3, r2
 8001832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001836:	464b      	mov	r3, r9
 8001838:	460a      	mov	r2, r1
 800183a:	eb42 0303 	adc.w	r3, r2, r3
 800183e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001846:	2200      	movs	r2, #0
 8001848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800184c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800185c:	4649      	mov	r1, r9
 800185e:	008b      	lsls	r3, r1, #2
 8001860:	4641      	mov	r1, r8
 8001862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001866:	4641      	mov	r1, r8
 8001868:	008a      	lsls	r2, r1, #2
 800186a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800186e:	f7fe fcbf 	bl	80001f0 <__aeabi_uldivmod>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4611      	mov	r1, r2
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <LL_USART_SetBaudRate+0x458>)
 800187a:	fba3 2301 	umull	r2, r3, r3, r1
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2264      	movs	r2, #100	@ 0x64
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	1acb      	subs	r3, r1, r3
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	3332      	adds	r3, #50	@ 0x32
 800188c:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <LL_USART_SetBaudRate+0x458>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	b29b      	uxth	r3, r3
 8001896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800189a:	b29b      	uxth	r3, r3
 800189c:	4423      	add	r3, r4
 800189e:	b29c      	uxth	r4, r3
 80018a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80018a4:	2200      	movs	r2, #0
 80018a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80018aa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80018ae:	4642      	mov	r2, r8
 80018b0:	464b      	mov	r3, r9
 80018b2:	1891      	adds	r1, r2, r2
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	415b      	adcs	r3, r3
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018be:	4641      	mov	r1, r8
 80018c0:	1851      	adds	r1, r2, r1
 80018c2:	6039      	str	r1, [r7, #0]
 80018c4:	4649      	mov	r1, r9
 80018c6:	414b      	adcs	r3, r1
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80018d6:	4659      	mov	r1, fp
 80018d8:	00cb      	lsls	r3, r1, #3
 80018da:	4651      	mov	r1, sl
 80018dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018e0:	4651      	mov	r1, sl
 80018e2:	00ca      	lsls	r2, r1, #3
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	4642      	mov	r2, r8
 80018ec:	189b      	adds	r3, r3, r2
 80018ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80018f0:	464b      	mov	r3, r9
 80018f2:	460a      	mov	r2, r1
 80018f4:	eb42 0303 	adc.w	r3, r2, r3
 80018f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80018fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80018fe:	2200      	movs	r2, #0
 8001900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001922:	f7fe fc65 	bl	80001f0 <__aeabi_uldivmod>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <LL_USART_SetBaudRate+0x458>)
 800192c:	fba3 1302 	umull	r1, r3, r3, r2
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	2164      	movs	r1, #100	@ 0x64
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	3332      	adds	r3, #50	@ 0x32
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LL_USART_SetBaudRate+0x458>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b29b      	uxth	r3, r3
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	b29b      	uxth	r3, r3
 800194e:	4423      	add	r3, r4
 8001950:	b29b      	uxth	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001958:	609a      	str	r2, [r3, #8]
}
 800195a:	bf00      	nop
 800195c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001960:	46bd      	mov	sp, r7
 8001962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001966:	bf00      	nop
 8001968:	51eb851f 	.word	0x51eb851f

0800196c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fd8c 	bl	800149c <LL_USART_IsEnabled>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d149      	bne.n	8001a1e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001992:	f023 030c 	bic.w	r3, r3, #12
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	6851      	ldr	r1, [r2, #4]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	68d2      	ldr	r2, [r2, #12]
 800199e:	4311      	orrs	r1, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	6912      	ldr	r2, [r2, #16]
 80019a4:	4311      	orrs	r1, r2
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	6992      	ldr	r2, [r2, #24]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fd83 	bl	80014c4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fd90 	bl	80014ea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fc9a 	bl	8001308 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <LL_USART_Init+0xbc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d102      	bne.n	80019e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e00c      	b.n	80019fc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a11      	ldr	r2, [pc, #68]	@ (8001a2c <LL_USART_Init+0xc0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d102      	bne.n	80019f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	e005      	b.n	80019fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a30 <LL_USART_Init+0xc4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fd79 	bl	8001510 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	40011400 	.word	0x40011400

08001a34 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <LL_InitTick+0x30>)
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <LL_InitTick+0x30>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <LL_InitTick+0x30>)
 8001a54:	2205      	movs	r2, #5
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001a70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffdd 	bl	8001a34 <LL_InitTick>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <LL_SetSystemCoreClock+0x1c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f103 0208 	add.w	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f103 0208 	add.w	r2, r3, #8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d103      	bne.n	8001b1e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e00c      	b.n	8001b38 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3308      	adds	r3, #8
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e002      	b.n	8001b2c <vListInsert+0x2e>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d2f6      	bcs.n	8001b26 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );



    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6892      	ldr	r2, [r2, #8]
 8001b86:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6852      	ldr	r2, [r2, #4]
 8001b90:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d103      	bne.n	8001ba4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d05d      	beq.n	8001c98 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d059      	beq.n	8001c98 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bec:	2100      	movs	r1, #0
 8001bee:	fba3 2302 	umull	r2, r3, r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d000      	beq.n	8001bf8 <xQueueGenericReset+0x34>
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d14c      	bne.n	8001c98 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8001bfe:	f001 fb09 	bl	8003214 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	441a      	add	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	441a      	add	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	22ff      	movs	r2, #255	@ 0xff
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	22ff      	movs	r2, #255	@ 0xff
 8001c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d114      	bne.n	8001c7e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01a      	beq.n	8001c92 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3310      	adds	r3, #16
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 ff3d 	bl	8002ae0 <xTaskRemoveFromEventList>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <xQueueGenericReset+0xe4>)
 8001c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	f3bf 8f6f 	isb	sy
 8001c7c:	e009      	b.n	8001c92 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3310      	adds	r3, #16
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff0e 	bl	8001aa4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	3324      	adds	r3, #36	@ 0x24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff09 	bl	8001aa4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001c92:	f001 fad9 	bl	8003248 <vPortExitCritical>
 8001c96:	e001      	b.n	8001c9c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	@ 0x28
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02d      	beq.n	8001d20 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	fba3 2302 	umull	r2, r3, r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d000      	beq.n	8001cd4 <xQueueGenericCreate+0x28>
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d122      	bne.n	8001d20 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ce2:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8001ce6:	d81b      	bhi.n	8001d20 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3348      	adds	r3, #72	@ 0x48
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fb3e 	bl	8003378 <pvPortMalloc>
 8001cfc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3348      	adds	r3, #72	@ 0x48
 8001d0c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f805 	bl	8001d2a <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8001d20:	69fb      	ldr	r3, [r7, #28]
    }
 8001d22:	4618      	mov	r0, r3
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e002      	b.n	8001d4c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d58:	2101      	movs	r1, #1
 8001d5a:	69b8      	ldr	r0, [r7, #24]
 8001d5c:	f7ff ff32 	bl	8001bc4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d7e:	f001 fa49 	bl	8003214 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d302      	bcc.n	8001d94 <xQueueGenericSend+0x2c>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d129      	bne.n	8001de8 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	6a38      	ldr	r0, [r7, #32]
 8001d9a:	f000 f931 	bl	8002000 <prvCopyDataToQueue>
 8001d9e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	3324      	adds	r3, #36	@ 0x24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fe97 	bl	8002ae0 <xTaskRemoveFromEventList>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001db8:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <xQueueGenericSend+0x150>)
 8001dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	e00a      	b.n	8001de0 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001dd0:	4b39      	ldr	r3, [pc, #228]	@ (8001eb8 <xQueueGenericSend+0x150>)
 8001dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001de0:	f001 fa32 	bl	8003248 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e063      	b.n	8001eb0 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001dee:	f001 fa2b 	bl	8003248 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e05c      	b.n	8001eb0 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d106      	bne.n	8001e0a <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 ff35 	bl	8002c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e0a:	f001 fa1d 	bl	8003248 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e0e:	f000 fbff 	bl	8002610 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e12:	f001 f9ff 	bl	8003214 <vPortEnterCritical>
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e22:	d103      	bne.n	8001e2c <xQueueGenericSend+0xc4>
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d103      	bne.n	8001e42 <xQueueGenericSend+0xda>
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e42:	f001 fa01 	bl	8003248 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e46:	1d3a      	adds	r2, r7, #4
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 ff24 	bl	8002c9c <xTaskCheckForTimeOut>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d124      	bne.n	8001ea4 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e5a:	6a38      	ldr	r0, [r7, #32]
 8001e5c:	f000 f9c8 	bl	80021f0 <prvIsQueueFull>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d018      	beq.n	8001e98 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	3310      	adds	r3, #16
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fe20 	bl	8002ab4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001e74:	6a38      	ldr	r0, [r7, #32]
 8001e76:	f000 f953 	bl	8002120 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001e7a:	f000 fbd7 	bl	800262c <xTaskResumeAll>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f af7c 	bne.w	8001d7e <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <xQueueGenericSend+0x150>)
 8001e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	e772      	b.n	8001d7e <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001e98:	6a38      	ldr	r0, [r7, #32]
 8001e9a:	f000 f941 	bl	8002120 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e9e:	f000 fbc5 	bl	800262c <xTaskResumeAll>
 8001ea2:	e76c      	b.n	8001d7e <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001ea4:	6a38      	ldr	r0, [r7, #32]
 8001ea6:	f000 f93b 	bl	8002120 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001eaa:	f000 fbbf 	bl	800262c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8001eae:	2300      	movs	r3, #0
        }
    }
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001ed0:	f001 f9a0 	bl	8003214 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01f      	beq.n	8001f20 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6a38      	ldr	r0, [r7, #32]
 8001ee4:	f000 f8f6 	bl	80020d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00f      	beq.n	8001f18 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	3310      	adds	r3, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fdef 	bl	8002ae0 <xTaskRemoveFromEventList>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001f08:	4b3c      	ldr	r3, [pc, #240]	@ (8001ffc <xQueueReceive+0x140>)
 8001f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001f18:	f001 f996 	bl	8003248 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e069      	b.n	8001ff4 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f26:	f001 f98f 	bl	8003248 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e062      	b.n	8001ff4 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fe99 	bl	8002c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f42:	f001 f981 	bl	8003248 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f46:	f000 fb63 	bl	8002610 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f4a:	f001 f963 	bl	8003214 <vPortEnterCritical>
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5a:	d103      	bne.n	8001f64 <xQueueReceive+0xa8>
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d103      	bne.n	8001f7a <xQueueReceive+0xbe>
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f7a:	f001 f965 	bl	8003248 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f7e:	1d3a      	adds	r2, r7, #4
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fe88 	bl	8002c9c <xTaskCheckForTimeOut>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d123      	bne.n	8001fda <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f92:	6a38      	ldr	r0, [r7, #32]
 8001f94:	f000 f916 	bl	80021c4 <prvIsQueueEmpty>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d017      	beq.n	8001fce <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	3324      	adds	r3, #36	@ 0x24
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fd84 	bl	8002ab4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001fac:	6a38      	ldr	r0, [r7, #32]
 8001fae:	f000 f8b7 	bl	8002120 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001fb2:	f000 fb3b 	bl	800262c <xTaskResumeAll>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d189      	bne.n	8001ed0 <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <xQueueReceive+0x140>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	e780      	b.n	8001ed0 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001fce:	6a38      	ldr	r0, [r7, #32]
 8001fd0:	f000 f8a6 	bl	8002120 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fd4:	f000 fb2a 	bl	800262c <xTaskResumeAll>
 8001fd8:	e77a      	b.n	8001ed0 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001fda:	6a38      	ldr	r0, [r7, #32]
 8001fdc:	f000 f8a0 	bl	8002120 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fe0:	f000 fb24 	bl	800262c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fe4:	6a38      	ldr	r0, [r7, #32]
 8001fe6:	f000 f8ed 	bl	80021c4 <prvIsQueueEmpty>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f43f af6f 	beq.w	8001ed0 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001ff2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	e000ed04 	.word	0xe000ed04

08002000 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d14d      	bne.n	80020c2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 ff3e 	bl	8002eac <xTaskPriorityDisinherit>
 8002030:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	e043      	b.n	80020c2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d119      	bne.n	8002074 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6858      	ldr	r0, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	461a      	mov	r2, r3
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	f001 fcc2 	bl	80039d4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	441a      	add	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	d32b      	bcc.n	80020c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	e026      	b.n	80020c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	68d8      	ldr	r0, [r3, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	461a      	mov	r2, r3
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	f001 fca8 	bl	80039d4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	425b      	negs	r3, r3
 800208e:	441a      	add	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	425b      	negs	r3, r3
 80020aa:	441a      	add	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d105      	bne.n	80020c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	3b01      	subs	r3, #1
 80020c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80020ca:	697b      	ldr	r3, [r7, #20]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d018      	beq.n	8002118 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d303      	bcc.n	8002108 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68d9      	ldr	r1, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	461a      	mov	r2, r3
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f001 fc5e 	bl	80039d4 <memcpy>
    }
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002128:	f001 f874 	bl	8003214 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002132:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002134:	e011      	b.n	800215a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3324      	adds	r3, #36	@ 0x24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fccc 	bl	8002ae0 <xTaskRemoveFromEventList>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800214e:	f000 fdef 	bl	8002d30 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3b01      	subs	r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	dce9      	bgt.n	8002136 <prvUnlockQueue+0x16>
 8002162:	e000      	b.n	8002166 <prvUnlockQueue+0x46>
                    break;
 8002164:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	22ff      	movs	r2, #255	@ 0xff
 800216a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800216e:	f001 f86b 	bl	8003248 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002172:	f001 f84f 	bl	8003214 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800217c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800217e:	e011      	b.n	80021a4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3310      	adds	r3, #16
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fca7 	bl	8002ae0 <xTaskRemoveFromEventList>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002198:	f000 fdca 	bl	8002d30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	3b01      	subs	r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dce9      	bgt.n	8002180 <prvUnlockQueue+0x60>
 80021ac:	e000      	b.n	80021b0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80021ae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	22ff      	movs	r2, #255	@ 0xff
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80021b8:	f001 f846 	bl	8003248 <vPortExitCritical>
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80021cc:	f001 f822 	bl	8003214 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80021d8:	2301      	movs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e001      	b.n	80021e2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80021e2:	f001 f831 	bl	8003248 <vPortExitCritical>

    return xReturn;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80021f8:	f001 f80c 	bl	8003214 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002204:	429a      	cmp	r2, r3
 8002206:	d102      	bne.n	800220e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002208:	2301      	movs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e001      	b.n	8002212 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002212:	f001 f819 	bl	8003248 <vPortExitCritical>

    return xReturn;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE usStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	@ 0x28
 8002224:	af04      	add	r7, sp, #16
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	80fb      	strh	r3, [r7, #6]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4618      	mov	r0, r3
 8002236:	f001 f89f 	bl	8003378 <pvPortMalloc>
 800223a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d013      	beq.n	800226a <prvCreateTask+0x4a>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002242:	2054      	movs	r0, #84	@ 0x54
 8002244:	f001 f898 	bl	8003378 <pvPortMalloc>
 8002248:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <prvCreateTask+0x42>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002250:	2254      	movs	r2, #84	@ 0x54
 8002252:	2100      	movs	r1, #0
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f001 fb91 	bl	800397c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002260:	e005      	b.n	800226e <prvCreateTask+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002262:	6938      	ldr	r0, [r7, #16]
 8002264:	f001 f936 	bl	80034d4 <vPortFree>
 8002268:	e001      	b.n	800226e <prvCreateTask+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <prvCreateTask+0x70>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	2300      	movs	r3, #0
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	9302      	str	r3, [sp, #8]
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f829 	bl	80022e2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002290:	697b      	ldr	r3, [r7, #20]
    }
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800229a:	b580      	push	{r7, lr}
 800229c:	b088      	sub	sp, #32
 800229e:	af02      	add	r7, sp, #8
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff ffb1 	bl	8002220 <prvCreateTask>
 80022be:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <xTaskCreate+0x38>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = tskNO_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80022c6:	6938      	ldr	r0, [r7, #16]
 80022c8:	f000 f874 	bl	80023b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022cc:	2301      	movs	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e002      	b.n	80022d8 <xTaskCreate+0x3e>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80022d8:	697b      	ldr	r3, [r7, #20]
    }
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022fa:	3b01      	subs	r3, #1
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f023 0307 	bic.w	r3, r3, #7
 8002308:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01e      	beq.n	800234e <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e012      	b.n	800233c <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4413      	add	r3, r2
 800231c:	7819      	ldrb	r1, [r3, #0]
 800231e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4413      	add	r3, r2
 8002324:	3334      	adds	r3, #52	@ 0x34
 8002326:	460a      	mov	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	d9e9      	bls.n	8002316 <prvInitialiseNewTask+0x34>
 8002342:	e000      	b.n	8002346 <prvInitialiseNewTask+0x64>
            {
                break;
 8002344:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d901      	bls.n	8002358 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002354:	2304      	movs	r3, #4
 8002356:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002366:	3304      	adds	r3, #4
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fbbb 	bl	8001ae4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002370:	3318      	adds	r3, #24
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fbb6 	bl	8001ae4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800237c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f1c3 0205 	rsb	r2, r3, #5
 8002384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002386:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	6938      	ldr	r0, [r7, #16]
 8002394:	f000 fe8e 	bl	80030b4 <pxPortInitialiseStack>
 8002398:	4602      	mov	r2, r0
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80023bc:	f000 ff2a 	bl	8003214 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks++;
 80023c0:	4b3e      	ldr	r3, [pc, #248]	@ (80024bc <prvAddNewTaskToReadyList+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	4a3d      	ldr	r2, [pc, #244]	@ (80024bc <prvAddNewTaskToReadyList+0x108>)
 80023c8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <prvAddNewTaskToReadyList+0x10c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80023d2:	4a3b      	ldr	r2, [pc, #236]	@ (80024c0 <prvAddNewTaskToReadyList+0x10c>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023d8:	4b38      	ldr	r3, [pc, #224]	@ (80024bc <prvAddNewTaskToReadyList+0x108>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d110      	bne.n	8002402 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80023e0:	f000 fcca 	bl	8002d78 <prvInitialiseTaskLists>
 80023e4:	e00d      	b.n	8002402 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80023e6:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <prvAddNewTaskToReadyList+0x110>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023ee:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <prvAddNewTaskToReadyList+0x10c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d802      	bhi.n	8002402 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80023fc:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <prvAddNewTaskToReadyList+0x10c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <prvAddNewTaskToReadyList+0x114>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	4a2f      	ldr	r2, [pc, #188]	@ (80024c8 <prvAddNewTaskToReadyList+0x114>)
 800240a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	2201      	movs	r2, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <prvAddNewTaskToReadyList+0x118>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4313      	orrs	r3, r2
 800241a:	4a2c      	ldr	r2, [pc, #176]	@ (80024cc <prvAddNewTaskToReadyList+0x118>)
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002422:	492b      	ldr	r1, [pc, #172]	@ (80024d0 <prvAddNewTaskToReadyList+0x11c>)
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3304      	adds	r3, #4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	3204      	adds	r2, #4
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	1d1a      	adds	r2, r3, #4
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <prvAddNewTaskToReadyList+0x11c>)
 8002462:	441a      	add	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	615a      	str	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246c:	4918      	ldr	r1, [pc, #96]	@ (80024d0 <prvAddNewTaskToReadyList+0x11c>)
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	4814      	ldr	r0, [pc, #80]	@ (80024d0 <prvAddNewTaskToReadyList+0x11c>)
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4403      	add	r3, r0
 8002488:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800248a:	f000 fedd 	bl	8003248 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <prvAddNewTaskToReadyList+0x110>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00e      	beq.n	80024b4 <prvAddNewTaskToReadyList+0x100>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <prvAddNewTaskToReadyList+0x10c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <prvAddNewTaskToReadyList+0x100>
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <prvAddNewTaskToReadyList+0x120>)
 80024a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000114 	.word	0x20000114
 80024c0:	2000003c 	.word	0x2000003c
 80024c4:	20000120 	.word	0x20000120
 80024c8:	20000130 	.word	0x20000130
 80024cc:	2000011c 	.word	0x2000011c
 80024d0:	20000040 	.word	0x20000040
 80024d4:	e000ed04 	.word	0xe000ed04

080024d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 80024ea:	f000 f891 	bl	8002610 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024ee:	2100      	movs	r1, #0
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fd5d 	bl	8002fb0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80024f6:	f000 f899 	bl	800262c <xTaskResumeAll>
 80024fa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d107      	bne.n	8002512 <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <vTaskDelay+0x44>)
 8002504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000ed04 	.word	0xe000ed04

08002520 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	@ 0x28
 8002524:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002526:	2301      	movs	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e011      	b.n	8002558 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002534:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <prvCreateIdleTasks+0x88>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4413      	add	r3, r2
 800253a:	7819      	ldrb	r1, [r3, #0]
 800253c:	463a      	mov	r2, r7
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4413      	add	r3, r2
 8002542:	460a      	mov	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002546:	463a      	mov	r2, r7
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	ddea      	ble.n	8002534 <prvCreateIdleTasks+0x14>
 800255e:	e000      	b.n	8002562 <prvCreateIdleTasks+0x42>
        {
            break;
 8002560:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e015      	b.n	8002594 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <prvCreateIdleTasks+0x8c>)
 800256a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4a0f      	ldr	r2, [pc, #60]	@ (80025b0 <prvCreateIdleTasks+0x90>)
 8002572:	4413      	add	r3, r2
 8002574:	4639      	mov	r1, r7
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2300      	movs	r3, #0
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	2280      	movs	r2, #128	@ 0x80
 8002580:	6938      	ldr	r0, [r7, #16]
 8002582:	f7ff fe8a 	bl	800229a <xTaskCreate>
 8002586:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	3301      	adds	r3, #1
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	dde6      	ble.n	8002568 <prvCreateIdleTasks+0x48>
 800259a:	e000      	b.n	800259e <prvCreateIdleTasks+0x7e>
        {
            break;
 800259c:	bf00      	nop
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xReturn;
 800259e:	69fb      	ldr	r3, [r7, #28]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	08003a3c 	.word	0x08003a3c
 80025ac:	08002d49 	.word	0x08002d49
 80025b0:	20000138 	.word	0x20000138

080025b4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80025ba:	f7ff ffb1 	bl	8002520 <prvCreateIdleTasks>
 80025be:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d115      	bne.n	80025f2 <vTaskStartScheduler+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80025c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	603b      	str	r3, [r7, #0]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80025d8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <vTaskStartScheduler+0x4c>)
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <vTaskStartScheduler+0x50>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <vTaskStartScheduler+0x54>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80025ee:	f000 fdd9 	bl	80031a4 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <vTaskStartScheduler+0x58>)
 80025f4:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000134 	.word	0x20000134
 8002604:	20000120 	.word	0x20000120
 8002608:	20000118 	.word	0x20000118
 800260c:	20000004 	.word	0x20000004

08002610 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        ++uxSchedulerSuspended;
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <vTaskSuspendAll+0x18>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a03      	ldr	r2, [pc, #12]	@ (8002628 <vTaskSuspendAll+0x18>)
 800261c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	2000013c 	.word	0x2000013c

0800262c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800263a:	f000 fdeb 	bl	8003214 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            --uxSchedulerSuspended;
 8002642:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <xTaskResumeAll+0x1c8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3b01      	subs	r3, #1
 8002648:	4a6a      	ldr	r2, [pc, #424]	@ (80027f4 <xTaskResumeAll+0x1c8>)
 800264a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800264c:	4b69      	ldr	r3, [pc, #420]	@ (80027f4 <xTaskResumeAll+0x1c8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 80c8 	bne.w	80027e6 <xTaskResumeAll+0x1ba>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002656:	4b68      	ldr	r3, [pc, #416]	@ (80027f8 <xTaskResumeAll+0x1cc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80c3 	beq.w	80027e6 <xTaskResumeAll+0x1ba>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002660:	e08c      	b.n	800277c <xTaskResumeAll+0x150>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002662:	4b66      	ldr	r3, [pc, #408]	@ (80027fc <xTaskResumeAll+0x1d0>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	6a12      	ldr	r2, [r2, #32]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	69d2      	ldr	r2, [r2, #28]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3318      	adds	r3, #24
 800268c:	429a      	cmp	r2, r3
 800268e:	d103      	bne.n	8002698 <xTaskResumeAll+0x6c>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	6892      	ldr	r2, [r2, #8]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3304      	adds	r3, #4
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d103      	bne.n	80026d6 <xTaskResumeAll+0xaa>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <xTaskResumeAll+0x1d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	4a42      	ldr	r2, [pc, #264]	@ (8002800 <xTaskResumeAll+0x1d4>)
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fc:	4941      	ldr	r1, [pc, #260]	@ (8002804 <xTaskResumeAll+0x1d8>)
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3304      	adds	r3, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	3204      	adds	r2, #4
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	1d1a      	adds	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4a32      	ldr	r2, [pc, #200]	@ (8002804 <xTaskResumeAll+0x1d8>)
 800273c:	441a      	add	r2, r3
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002746:	492f      	ldr	r1, [pc, #188]	@ (8002804 <xTaskResumeAll+0x1d8>)
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	482b      	ldr	r0, [pc, #172]	@ (8002804 <xTaskResumeAll+0x1d8>)
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4403      	add	r3, r0
 8002762:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <xTaskResumeAll+0x1dc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	429a      	cmp	r2, r3
 8002770:	d904      	bls.n	800277c <xTaskResumeAll+0x150>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002772:	4a26      	ldr	r2, [pc, #152]	@ (800280c <xTaskResumeAll+0x1e0>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2101      	movs	r1, #1
 8002778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <xTaskResumeAll+0x1d0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f af6e 	bne.w	8002662 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <xTaskResumeAll+0x164>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800278c:	f000 fb72 	bl	8002e74 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002790:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <xTaskResumeAll+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <xTaskResumeAll+0x196>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800279c:	f000 f83c 	bl	8002818 <xTaskIncrementTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <xTaskResumeAll+0x184>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80027a6:	4a19      	ldr	r2, [pc, #100]	@ (800280c <xTaskResumeAll+0x1e0>)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2101      	movs	r1, #1
 80027ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ef      	bne.n	800279c <xTaskResumeAll+0x170>

                            xPendedTicks = 0;
 80027bc:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <xTaskResumeAll+0x1e4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80027c2:	4a12      	ldr	r2, [pc, #72]	@ (800280c <xTaskResumeAll+0x1e0>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <xTaskResumeAll+0x1ba>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <xTaskResumeAll+0x1dc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <xTaskResumeAll+0x1e8>)
 80027d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80027e6:	f000 fd2f 	bl	8003248 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80027ea:	69bb      	ldr	r3, [r7, #24]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000013c 	.word	0x2000013c
 80027f8:	20000114 	.word	0x20000114
 80027fc:	200000d4 	.word	0x200000d4
 8002800:	2000011c 	.word	0x2000011c
 8002804:	20000040 	.word	0x20000040
 8002808:	2000003c 	.word	0x2000003c
 800280c:	20000128 	.word	0x20000128
 8002810:	20000124 	.word	0x20000124
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002822:	4b75      	ldr	r3, [pc, #468]	@ (80029f8 <xTaskIncrementTick+0x1e0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 80dc 	bne.w	80029e4 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800282c:	4b73      	ldr	r3, [pc, #460]	@ (80029fc <xTaskIncrementTick+0x1e4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002834:	4a71      	ldr	r2, [pc, #452]	@ (80029fc <xTaskIncrementTick+0x1e4>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d110      	bne.n	8002862 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002840:	4b6f      	ldr	r3, [pc, #444]	@ (8002a00 <xTaskIncrementTick+0x1e8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <xTaskIncrementTick+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a00 <xTaskIncrementTick+0x1e8>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4a6d      	ldr	r2, [pc, #436]	@ (8002a04 <xTaskIncrementTick+0x1ec>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <xTaskIncrementTick+0x1f0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <xTaskIncrementTick+0x1f0>)
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	f000 fb09 	bl	8002e74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002862:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <xTaskIncrementTick+0x1f4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	429a      	cmp	r2, r3
 800286a:	f0c0 80a6 	bcc.w	80029ba <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800286e:	4b64      	ldr	r3, [pc, #400]	@ (8002a00 <xTaskIncrementTick+0x1e8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002878:	4b64      	ldr	r3, [pc, #400]	@ (8002a0c <xTaskIncrementTick+0x1f4>)
 800287a:	f04f 32ff 	mov.w	r2, #4294967295
 800287e:	601a      	str	r2, [r3, #0]
                    break;
 8002880:	e09b      	b.n	80029ba <xTaskIncrementTick+0x1a2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002882:	4b5f      	ldr	r3, [pc, #380]	@ (8002a00 <xTaskIncrementTick+0x1e8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	429a      	cmp	r2, r3
 8002898:	d203      	bcs.n	80028a2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800289a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a0c <xTaskIncrementTick+0x1f4>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6013      	str	r3, [r2, #0]
                        break;
 80028a0:	e08b      	b.n	80029ba <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68d2      	ldr	r2, [r2, #12]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3304      	adds	r3, #4
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d103      	bne.n	80028d0 <xTaskIncrementTick+0xb8>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2200      	movs	r2, #0
 80028d4:	615a      	str	r2, [r3, #20]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01e      	beq.n	8002926 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	6a12      	ldr	r2, [r2, #32]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	69d2      	ldr	r2, [r2, #28]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	3318      	adds	r3, #24
 800290a:	429a      	cmp	r2, r3
 800290c:	d103      	bne.n	8002916 <xTaskIncrementTick+0xfe>
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2200      	movs	r2, #0
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	2201      	movs	r2, #1
 800292c:	409a      	lsls	r2, r3
 800292e:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <xTaskIncrementTick+0x1f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	4a36      	ldr	r2, [pc, #216]	@ (8002a10 <xTaskIncrementTick+0x1f8>)
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293c:	4935      	ldr	r1, [pc, #212]	@ (8002a14 <xTaskIncrementTick+0x1fc>)
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	3304      	adds	r3, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	3204      	adds	r2, #4
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1d1a      	adds	r2, r3, #4
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <xTaskIncrementTick+0x1fc>)
 800297c:	441a      	add	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	615a      	str	r2, [r3, #20]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002986:	4923      	ldr	r1, [pc, #140]	@ (8002a14 <xTaskIncrementTick+0x1fc>)
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	1c59      	adds	r1, r3, #1
 8002996:	481f      	ldr	r0, [pc, #124]	@ (8002a14 <xTaskIncrementTick+0x1fc>)
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <xTaskIncrementTick+0x200>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	429a      	cmp	r2, r3
 80029b0:	f67f af5d 	bls.w	800286e <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b8:	e759      	b.n	800286e <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <xTaskIncrementTick+0x200>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c0:	4914      	ldr	r1, [pc, #80]	@ (8002a14 <xTaskIncrementTick+0x1fc>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d901      	bls.n	80029d6 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80029d6:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <xTaskIncrementTick+0x204>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e004      	b.n	80029ee <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <xTaskIncrementTick+0x208>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <xTaskIncrementTick+0x208>)
 80029ec:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80029ee:	69fb      	ldr	r3, [r7, #28]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000013c 	.word	0x2000013c
 80029fc:	20000118 	.word	0x20000118
 8002a00:	200000cc 	.word	0x200000cc
 8002a04:	200000d0 	.word	0x200000d0
 8002a08:	2000012c 	.word	0x2000012c
 8002a0c:	20000134 	.word	0x20000134
 8002a10:	2000011c 	.word	0x2000011c
 8002a14:	20000040 	.word	0x20000040
 8002a18:	2000003c 	.word	0x2000003c
 8002a1c:	20000128 	.word	0x20000128
 8002a20:	20000124 	.word	0x20000124

08002a24 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <vTaskSwitchContext+0x7c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa4 <vTaskSwitchContext+0x80>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002a38:	e02b      	b.n	8002a92 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <vTaskSwitchContext+0x80>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <vTaskSwitchContext+0x84>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f1c3 031f 	rsb	r3, r3, #31
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <vTaskSwitchContext+0x88>)
 8002a62:	4413      	add	r3, r2
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3308      	adds	r3, #8
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d103      	bne.n	8002a84 <vTaskSwitchContext+0x60>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <vTaskSwitchContext+0x8c>)
 8002a8c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002a8e:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <vTaskSwitchContext+0x8c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
    }
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000013c 	.word	0x2000013c
 8002aa4:	20000128 	.word	0x20000128
 8002aa8:	2000011c 	.word	0x2000011c
 8002aac:	20000040 	.word	0x20000040
 8002ab0:	2000003c 	.word	0x2000003c

08002ab4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002abe:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <vTaskPlaceOnEventList+0x28>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3318      	adds	r3, #24
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff f819 	bl	8001afe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002acc:	2101      	movs	r1, #1
 8002ace:	6838      	ldr	r0, [r7, #0]
 8002ad0:	f000 fa6e 	bl	8002fb0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000003c 	.word	0x2000003c

08002ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	@ 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	6a12      	ldr	r2, [r2, #32]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	69d2      	ldr	r2, [r2, #28]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3318      	adds	r3, #24
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d103      	bne.n	8002b1e <xTaskRemoveFromEventList+0x3e>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2200      	movs	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c58 <xTaskRemoveFromEventList+0x178>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d15e      	bne.n	8002bf4 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	68d2      	ldr	r2, [r2, #12]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	6892      	ldr	r2, [r2, #8]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	3304      	adds	r3, #4
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d103      	bne.n	8002b64 <xTaskRemoveFromEventList+0x84>
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2200      	movs	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	2201      	movs	r2, #1
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <xTaskRemoveFromEventList+0x17c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	4a36      	ldr	r2, [pc, #216]	@ (8002c5c <xTaskRemoveFromEventList+0x17c>)
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8a:	4935      	ldr	r1, [pc, #212]	@ (8002c60 <xTaskRemoveFromEventList+0x180>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3304      	adds	r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	3204      	adds	r2, #4
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <xTaskRemoveFromEventList+0x180>)
 8002bca:	441a      	add	r2, r3
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd4:	4922      	ldr	r1, [pc, #136]	@ (8002c60 <xTaskRemoveFromEventList+0x180>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	481e      	ldr	r0, [pc, #120]	@ (8002c60 <xTaskRemoveFromEventList+0x180>)
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4403      	add	r3, r0
 8002bf0:	6019      	str	r1, [r3, #0]
 8002bf2:	e01b      	b.n	8002c2c <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <xTaskRemoveFromEventList+0x184>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	61da      	str	r2, [r3, #28]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	3218      	adds	r2, #24
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f103 0218 	add.w	r2, r3, #24
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4a11      	ldr	r2, [pc, #68]	@ (8002c64 <xTaskRemoveFromEventList+0x184>)
 8002c20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <xTaskRemoveFromEventList+0x184>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	4a0e      	ldr	r2, [pc, #56]	@ (8002c64 <xTaskRemoveFromEventList+0x184>)
 8002c2a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c30:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <xTaskRemoveFromEventList+0x188>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d905      	bls.n	8002c46 <xTaskRemoveFromEventList+0x166>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <xTaskRemoveFromEventList+0x18c>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e001      	b.n	8002c4a <xTaskRemoveFromEventList+0x16a>
        }
        else
        {
            xReturn = pdFALSE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3724      	adds	r7, #36	@ 0x24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	2000013c 	.word	0x2000013c
 8002c5c:	2000011c 	.word	0x2000011c
 8002c60:	20000040 	.word	0x20000040
 8002c64:	200000d4 	.word	0x200000d4
 8002c68:	2000003c 	.word	0x2000003c
 8002c6c:	20000128 	.word	0x20000128

08002c70 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <vTaskInternalSetTimeOutState+0x24>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <vTaskInternalSetTimeOutState+0x28>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	2000012c 	.word	0x2000012c
 8002c98:	20000118 	.word	0x20000118

08002c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8002ca6:	f000 fab5 	bl	8003214 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002caa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <xTaskCheckForTimeOut+0x8c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d102      	bne.n	8002cca <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e026      	b.n	8002d18 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <xTaskCheckForTimeOut+0x90>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d00a      	beq.n	8002cec <xTaskCheckForTimeOut+0x50>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d305      	bcc.n	8002cec <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e015      	b.n	8002d18 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d20b      	bcs.n	8002d0e <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad2      	subs	r2, r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffb4 	bl	8002c70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e004      	b.n	8002d18 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002d18:	f000 fa96 	bl	8003248 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002d1c:	697b      	ldr	r3, [r7, #20]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000118 	.word	0x20000118
 8002d2c:	2000012c 	.word	0x2000012c

08002d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <vTaskMissedYield+0x14>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000128 	.word	0x20000128

08002d48 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d50:	f000 f852 	bl	8002df8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <prvIdleTask+0x28>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d9f9      	bls.n	8002d50 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <prvIdleTask+0x2c>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d6c:	e7f0      	b.n	8002d50 <prvIdleTask+0x8>
 8002d6e:	bf00      	nop
 8002d70:	20000040 	.word	0x20000040
 8002d74:	e000ed04 	.word	0xe000ed04

08002d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	e00c      	b.n	8002d9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <prvInitialiseTaskLists+0x60>)
 8002d90:	4413      	add	r3, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fe86 	bl	8001aa4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d9ef      	bls.n	8002d84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002da4:	480d      	ldr	r0, [pc, #52]	@ (8002ddc <prvInitialiseTaskLists+0x64>)
 8002da6:	f7fe fe7d 	bl	8001aa4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002daa:	480d      	ldr	r0, [pc, #52]	@ (8002de0 <prvInitialiseTaskLists+0x68>)
 8002dac:	f7fe fe7a 	bl	8001aa4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002db0:	480c      	ldr	r0, [pc, #48]	@ (8002de4 <prvInitialiseTaskLists+0x6c>)
 8002db2:	f7fe fe77 	bl	8001aa4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002db6:	480c      	ldr	r0, [pc, #48]	@ (8002de8 <prvInitialiseTaskLists+0x70>)
 8002db8:	f7fe fe74 	bl	8001aa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002dbc:	480b      	ldr	r0, [pc, #44]	@ (8002dec <prvInitialiseTaskLists+0x74>)
 8002dbe:	f7fe fe71 	bl	8001aa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <prvInitialiseTaskLists+0x78>)
 8002dc4:	4a05      	ldr	r2, [pc, #20]	@ (8002ddc <prvInitialiseTaskLists+0x64>)
 8002dc6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <prvInitialiseTaskLists+0x7c>)
 8002dca:	4a05      	ldr	r2, [pc, #20]	@ (8002de0 <prvInitialiseTaskLists+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000040 	.word	0x20000040
 8002ddc:	200000a4 	.word	0x200000a4
 8002de0:	200000b8 	.word	0x200000b8
 8002de4:	200000d4 	.word	0x200000d4
 8002de8:	200000e8 	.word	0x200000e8
 8002dec:	20000100 	.word	0x20000100
 8002df0:	200000cc 	.word	0x200000cc
 8002df4:	200000d0 	.word	0x200000d0

08002df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dfe:	e019      	b.n	8002e34 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002e00:	f000 fa08 	bl	8003214 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <prvCheckTasksWaitingTermination+0x50>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fead 	bl	8001b70 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <prvCheckTasksWaitingTermination+0x54>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e4c <prvCheckTasksWaitingTermination+0x54>)
 8002e1e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <prvCheckTasksWaitingTermination+0x58>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <prvCheckTasksWaitingTermination+0x58>)
 8002e28:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002e2a:	f000 fa0d 	bl	8003248 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f810 	bl	8002e54 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e34:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <prvCheckTasksWaitingTermination+0x58>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e1      	bne.n	8002e00 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200000e8 	.word	0x200000e8
 8002e4c:	20000114 	.word	0x20000114
 8002e50:	200000fc 	.word	0x200000fc

08002e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fb37 	bl	80034d4 <vPortFree>
            vPortFree( pxTCB );
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fb34 	bl	80034d4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <prvResetNextTaskUnblockTime+0x30>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <prvResetNextTaskUnblockTime+0x34>)
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e8a:	e005      	b.n	8002e98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <prvResetNextTaskUnblockTime+0x30>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <prvResetNextTaskUnblockTime+0x34>)
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	200000cc 	.word	0x200000cc
 8002ea8:	20000134 	.word	0x20000134

08002eac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d061      	beq.n	8002f9c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15d      	bne.n	8002f9c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fe43 	bl	8001b70 <uxListRemove>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <xTaskPriorityDisinherit+0xfc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4013      	ands	r3, r2
 8002f02:	4a29      	ldr	r2, [pc, #164]	@ (8002fa8 <xTaskPriorityDisinherit+0xfc>)
 8002f04:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f12:	f1c3 0205 	rsb	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <xTaskPriorityDisinherit+0xfc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa8 <xTaskPriorityDisinherit+0xfc>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f30:	491e      	ldr	r1, [pc, #120]	@ (8002fac <xTaskPriorityDisinherit+0x100>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	3204      	adds	r2, #4
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1d1a      	adds	r2, r3, #4
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fac <xTaskPriorityDisinherit+0x100>)
 8002f70:	441a      	add	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	615a      	str	r2, [r3, #20]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f7a:	490c      	ldr	r1, [pc, #48]	@ (8002fac <xTaskPriorityDisinherit+0x100>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	4808      	ldr	r0, [pc, #32]	@ (8002fac <xTaskPriorityDisinherit+0x100>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4403      	add	r3, r0
 8002f96:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002f9c:	697b      	ldr	r3, [r7, #20]
    }
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	2000011c 	.word	0x2000011c
 8002fac:	20000040 	.word	0x20000040

08002fb0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002fba:	4b37      	ldr	r3, [pc, #220]	@ (8003098 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002fc0:	4b36      	ldr	r3, [pc, #216]	@ (800309c <prvAddCurrentTaskToDelayedList+0xec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fcc:	4b35      	ldr	r3, [pc, #212]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fdcc 	bl	8001b70 <uxListRemove>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002fde:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	4b2e      	ldr	r3, [pc, #184]	@ (80030a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002ff4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d124      	bne.n	8003048 <prvAddCurrentTaskToDelayedList+0x98>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d021      	beq.n	8003048 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	6892      	ldr	r2, [r2, #8]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	3204      	adds	r2, #4
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	4b1e      	ldr	r3, [pc, #120]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <prvAddCurrentTaskToDelayedList+0xfc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	4a1a      	ldr	r2, [pc, #104]	@ (80030ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003046:	e022      	b.n	800308e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003050:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	429a      	cmp	r2, r3
 800305e:	d207      	bcs.n	8003070 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7fe fd48 	bl	8001afe <vListInsert>
}
 800306e:	e00e      	b.n	800308e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	69b8      	ldr	r0, [r7, #24]
 800307a:	f7fe fd40 	bl	8001afe <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800307e:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d202      	bcs.n	800308e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8003088:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <prvAddCurrentTaskToDelayedList+0x100>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6013      	str	r3, [r2, #0]
}
 800308e:	bf00      	nop
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000118 	.word	0x20000118
 800309c:	200000cc 	.word	0x200000cc
 80030a0:	200000d0 	.word	0x200000d0
 80030a4:	2000003c 	.word	0x2000003c
 80030a8:	2000011c 	.word	0x2000011c
 80030ac:	20000100 	.word	0x20000100
 80030b0:	20000134 	.word	0x20000134

080030b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b04      	subs	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3b04      	subs	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3b04      	subs	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003118 <pxPortInitialiseStack+0x64>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3b14      	subs	r3, #20
 80030ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b04      	subs	r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f06f 0202 	mvn.w	r2, #2
 8003102:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b20      	subs	r3, #32
 8003108:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	0800311d 	.word	0x0800311d

0800311c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	607b      	str	r3, [r7, #4]
}
 8003138:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800313a:	bf00      	nop
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0fc      	beq.n	800313c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003150:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <pxCurrentTCBConst2>)
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315a:	f380 8809 	msr	PSP, r0
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8811 	msr	BASEPRI, r0
 800316a:	4770      	bx	lr
 800316c:	f3af 8000 	nop.w

08003170 <pxCurrentTCBConst2>:
 8003170:	2000003c 	.word	0x2000003c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003178:	4808      	ldr	r0, [pc, #32]	@ (800319c <prvPortStartFirstTask+0x24>)
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	6800      	ldr	r0, [r0, #0]
 800317e:	f380 8808 	msr	MSP, r0
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f380 8814 	msr	CONTROL, r0
 800318a:	b662      	cpsie	i
 800318c:	b661      	cpsie	f
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	df00      	svc	0
 8003198:	bf00      	nop
 800319a:	0000      	.short	0x0000
 800319c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop

080031a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <xPortStartScheduler+0x5c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <xPortStartScheduler+0x60>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a13      	ldr	r2, [pc, #76]	@ (8003204 <xPortStartScheduler+0x60>)
 80031b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <xPortStartScheduler+0x60>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a10      	ldr	r2, [pc, #64]	@ (8003204 <xPortStartScheduler+0x60>)
 80031c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <xPortStartScheduler+0x64>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80031ce:	f000 f8ad 	bl	800332c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <xPortStartScheduler+0x68>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80031d8:	f000 f8c2 	bl	8003360 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <xPortStartScheduler+0x6c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003210 <xPortStartScheduler+0x6c>)
 80031e2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80031e6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80031e8:	f7ff ffc6 	bl	8003178 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80031ec:	f7ff fc1a 	bl	8002a24 <vTaskSwitchContext>
    prvTaskExitError();
 80031f0:	f7ff ff94 	bl	800311c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000ed08 	.word	0xe000ed08
 8003204:	e000ed20 	.word	0xe000ed20
 8003208:	e000ed1c 	.word	0xe000ed1c
 800320c:	20000008 	.word	0x20000008
 8003210:	e000ef34 	.word	0xe000ef34

08003214 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
    __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	607b      	str	r3, [r7, #4]
}
 800322c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800322e:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <vPortEnterCritical+0x30>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	4a03      	ldr	r2, [pc, #12]	@ (8003244 <vPortEnterCritical+0x30>)
 8003236:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	20000008 	.word	0x20000008

08003248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <vPortExitCritical+0x30>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3b01      	subs	r3, #1
 8003254:	4a08      	ldr	r2, [pc, #32]	@ (8003278 <vPortExitCritical+0x30>)
 8003256:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003258:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <vPortExitCritical+0x30>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <vPortExitCritical+0x24>
 8003260:	2300      	movs	r3, #0
 8003262:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800326a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	20000008 	.word	0x20000008
 800327c:	00000000 	.word	0x00000000

08003280 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003280:	f3ef 8009 	mrs	r0, PSP
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <pxCurrentTCBConst>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f01e 0f10 	tst.w	lr, #16
 8003290:	bf08      	it	eq
 8003292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80032a4:	f380 8811 	msr	BASEPRI, r0
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f7ff fbb8 	bl	8002a24 <vTaskSwitchContext>
 80032b4:	f04f 0000 	mov.w	r0, #0
 80032b8:	f380 8811 	msr	BASEPRI, r0
 80032bc:	bc09      	pop	{r0, r3}
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	6808      	ldr	r0, [r1, #0]
 80032c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c6:	f01e 0f10 	tst.w	lr, #16
 80032ca:	bf08      	it	eq
 80032cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032d0:	f380 8809 	msr	PSP, r0
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst>:
 80032e0:	2000003c 	.word	0x2000003c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
    __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
}
 8003300:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003302:	f7ff fa89 	bl	8002818 <xTaskIncrementTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <xPortSysTickHandler+0x40>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f383 8811 	msr	BASEPRI, r3
}
 800331e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003330:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <vPortSetupTimerInterrupt+0x28>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <vPortSetupTimerInterrupt+0x2c>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800333c:	4b07      	ldr	r3, [pc, #28]	@ (800335c <vPortSetupTimerInterrupt+0x30>)
 800333e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003342:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <vPortSetupTimerInterrupt+0x28>)
 8003346:	2207      	movs	r2, #7
 8003348:	601a      	str	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000e010 	.word	0xe000e010
 8003358:	e000e018 	.word	0xe000e018
 800335c:	e000e014 	.word	0xe000e014

08003360 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003360:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003370 <vPortEnableVFP+0x10>
 8003364:	6801      	ldr	r1, [r0, #0]
 8003366:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800336a:	6001      	str	r1, [r0, #0]
 800336c:	4770      	bx	lr
 800336e:	0000      	.short	0x0000
 8003370:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop

08003378 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d022      	beq.n	80033d0 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800338a:	2308      	movs	r3, #8
 800338c:	43db      	mvns	r3, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d81b      	bhi.n	80033cc <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003394:	2208      	movs	r2, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d014      	beq.n	80033d0 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	f1c3 0308 	rsb	r3, r3, #8
 80033b0:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d804      	bhi.n	80033c6 <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	e004      	b.n	80033d0 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	e001      	b.n	80033d0 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80033d0:	f7ff f91e 	bl	8002610 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033d4:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <pvPortMalloc+0x148>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80033dc:	f000 f8b8 	bl	8003550 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db64      	blt.n	80034b0 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d061      	beq.n	80034b0 <pvPortMalloc+0x138>
 80033ec:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <pvPortMalloc+0x14c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d85c      	bhi.n	80034b0 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033f6:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <pvPortMalloc+0x150>)
 80033f8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80033fa:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <pvPortMalloc+0x150>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003400:	e004      	b.n	800340c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d903      	bls.n	800341e <pvPortMalloc+0xa6>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f1      	bne.n	8003402 <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800341e:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <pvPortMalloc+0x148>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	429a      	cmp	r2, r3
 8003426:	d043      	beq.n	80034b0 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	4413      	add	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1ad2      	subs	r2, r2, r3
 8003442:	2308      	movs	r3, #8
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	429a      	cmp	r2, r3
 8003448:	d913      	bls.n	8003472 <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad2      	subs	r2, r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003472:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <pvPortMalloc+0x14c>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <pvPortMalloc+0x14c>)
 800347e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003480:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <pvPortMalloc+0x14c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <pvPortMalloc+0x154>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d203      	bcs.n	8003494 <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <pvPortMalloc+0x14c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0e      	ldr	r2, [pc, #56]	@ (80034cc <pvPortMalloc+0x154>)
 8003492:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <pvPortMalloc+0x158>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <pvPortMalloc+0x158>)
 80034ae:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80034b0:	f7ff f8bc 	bl	800262c <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80034b4:	697b      	ldr	r3, [r7, #20]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20004548 	.word	0x20004548
 80034c4:	2000454c 	.word	0x2000454c
 80034c8:	20004540 	.word	0x20004540
 80034cc:	20004550 	.word	0x20004550
 80034d0:	20004554 	.word	0x20004554

080034d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d02b      	beq.n	800353e <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80034e6:	2308      	movs	r3, #8
 80034e8:	425b      	negs	r3, r3
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0fdb      	lsrs	r3, r3, #31
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d118      	bne.n	800353e <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003518:	f7ff f87a 	bl	8002610 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <vPortFree+0x74>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4413      	add	r3, r2
 8003526:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <vPortFree+0x74>)
 8003528:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800352a:	68b8      	ldr	r0, [r7, #8]
 800352c:	f000 f86a 	bl	8003604 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003530:	4b06      	ldr	r3, [pc, #24]	@ (800354c <vPortFree+0x78>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	4a05      	ldr	r2, [pc, #20]	@ (800354c <vPortFree+0x78>)
 8003538:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800353a:	f7ff f877 	bl	800262c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	2000454c 	.word	0x2000454c
 800354c:	20004558 	.word	0x20004558

08003550 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003556:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800355a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <prvHeapInit+0xa0>)
 800355e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3307      	adds	r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <prvHeapInit+0xa0>)
 8003580:	4413      	add	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <prvHeapInit+0xa4>)
 8003588:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800358a:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <prvHeapInit+0xa4>)
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4413      	add	r3, r2
 8003596:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003598:	2208      	movs	r2, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f023 0307 	bic.w	r3, r3, #7
 80035a6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <prvHeapInit+0xa8>)
 80035ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80035ae:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <prvHeapInit+0xa8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <prvHeapInit+0xa8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <prvHeapInit+0xa8>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <prvHeapInit+0xac>)
 80035da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <prvHeapInit+0xb0>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000140 	.word	0x20000140
 80035f4:	20004540 	.word	0x20004540
 80035f8:	20004548 	.word	0x20004548
 80035fc:	20004550 	.word	0x20004550
 8003600:	2000454c 	.word	0x2000454c

08003604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800360c:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <prvInsertBlockIntoFreeList+0xac>)
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e002      	b.n	8003618 <prvInsertBlockIntoFreeList+0x14>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d8f7      	bhi.n	8003612 <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d108      	bne.n	8003646 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d118      	bne.n	800368c <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d00d      	beq.n	8003682 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e008      	b.n	8003694 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e003      	b.n	8003694 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d002      	beq.n	80036a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20004540 	.word	0x20004540
 80036b4:	20004548 	.word	0x20004548

080036b8 <__NVIC_EnableIRQ>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	db0b      	blt.n	80036e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	4907      	ldr	r1, [pc, #28]	@ (80036f0 <__NVIC_EnableIRQ+0x38>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2001      	movs	r0, #1
 80036da:	fa00 f202 	lsl.w	r2, r0, r2
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_DisableIRQ>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db12      	blt.n	800372c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	490a      	ldr	r1, [pc, #40]	@ (8003738 <__NVIC_DisableIRQ+0x44>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2001      	movs	r0, #1
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	3320      	adds	r3, #32
 800371c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003720:	f3bf 8f4f 	dsb	sy
}
 8003724:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003726:	f3bf 8f6f 	isb	sy
}
 800372a:	bf00      	nop
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100

0800373c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	330c      	adds	r3, #12
 80037b0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	330c      	adds	r3, #12
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	61ba      	str	r2, [r7, #24]
 80037ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6979      	ldr	r1, [r7, #20]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	613b      	str	r3, [r7, #16]
   return(result);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e7      	bne.n	80037ac <LL_USART_DisableIT_TC+0x8>
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b2db      	uxtb	r3, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	605a      	str	r2, [r3, #4]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <IsBufferEmpty>:
//*****************************************************************************

static bool
IsBufferEmpty(volatile uint32_t *pui32Read,
              volatile uint32_t *pui32Write)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
    ui32Read = *pui32Read;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60bb      	str	r3, [r7, #8]

    return ((ui32Write == ui32Read) ? true : false);
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <UARTPrimeTransmit>:
//
//*****************************************************************************

static void
UARTPrimeTransmit()
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

    //
    // Do we have any data to transmit?
    //
    if (!TX_BUFFER_EMPTY)
 8003858:	4914      	ldr	r1, [pc, #80]	@ (80038ac <UARTPrimeTransmit+0x58>)
 800385a:	4815      	ldr	r0, [pc, #84]	@ (80038b0 <UARTPrimeTransmit+0x5c>)
 800385c:	f7ff ffe1 	bl	8003822 <IsBufferEmpty>
 8003860:	4603      	mov	r3, r0
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01c      	beq.n	80038a6 <UARTPrimeTransmit+0x52>
    {
        //
        // Disable the UART interrupt.  If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
        NVIC_DisableIRQ(uartstdio_device.uart_irqn);
 800386c:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <UARTPrimeTransmit+0x60>)
 800386e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff3e 	bl	80036f4 <__NVIC_DisableIRQ>
        //
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //

        LL_USART_TransmitData8(uartstdio_device.uart,
 8003878:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <UARTPrimeTransmit+0x60>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <UARTPrimeTransmit+0x5c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	490d      	ldr	r1, [pc, #52]	@ (80038b8 <UARTPrimeTransmit+0x64>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7ff ffbc 	bl	8003804 <LL_USART_TransmitData8>
                               g_pcUARTTxBuffer[g_ui32UARTTxReadIndex]);
        ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 800388c:	4b08      	ldr	r3, [pc, #32]	@ (80038b0 <UARTPrimeTransmit+0x5c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003896:	4a06      	ldr	r2, [pc, #24]	@ (80038b0 <UARTPrimeTransmit+0x5c>)
 8003898:	6013      	str	r3, [r2, #0]

        //
        // Reenable the UART interrupt.
        //
        NVIC_EnableIRQ(uartstdio_device.uart_irqn);
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <UARTPrimeTransmit+0x60>)
 800389c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff09 	bl	80036b8 <__NVIC_EnableIRQ>
    }
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200045e4 	.word	0x200045e4
 80038b0:	200045e8 	.word	0x200045e8
 80038b4:	2000455c 	.word	0x2000455c
 80038b8:	20004564 	.word	0x20004564

080038bc <UARTStdioIntHandler>:
//! \return None.
//
//*****************************************************************************

void UARTStdioIntHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
    int8_t cChar;

    static bool bLastWasCR = false;
    USART_TypeDef *std_uart = uartstdio_device.uart;
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <UARTStdioIntHandler+0x90>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	607b      	str	r3, [r7, #4]

    //
    // Are we being interrupted because the TX FIFO has space available?
    //
    if (LL_USART_IsActiveFlag_TC(std_uart))
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff4a 	bl	8003762 <LL_USART_IsActiveFlag_TC>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <UARTStdioIntHandler+0x36>
    {
        LL_USART_ClearFlag_TC(std_uart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff57 	bl	8003788 <LL_USART_ClearFlag_TC>
        //
        // Move as many bytes as we can into the transmit FIFO.
        //
        UARTPrimeTransmit();
 80038da:	f7ff ffbb 	bl	8003854 <UARTPrimeTransmit>

        //
        // If the output buffer is empty, turn off the transmit interrupt.
        //
        if (TX_BUFFER_EMPTY)
 80038de:	491c      	ldr	r1, [pc, #112]	@ (8003950 <UARTStdioIntHandler+0x94>)
 80038e0:	481c      	ldr	r0, [pc, #112]	@ (8003954 <UARTStdioIntHandler+0x98>)
 80038e2:	f7ff ff9e 	bl	8003822 <IsBufferEmpty>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <UARTStdioIntHandler+0x36>
        {
            LL_USART_DisableIT_TC(std_uart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff59 	bl	80037a4 <LL_USART_DisableIT_TC>
    }

    //
    // Are we being interrupted due to a received character?
    //
    if (LL_USART_IsActiveFlag_RXNE(std_uart))
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff22 	bl	800373c <LL_USART_IsActiveFlag_RXNE>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d021      	beq.n	8003942 <UARTStdioIntHandler+0x86>
    {
        cChar = LL_USART_ReceiveData8(std_uart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff73 	bl	80037ea <LL_USART_ReceiveData8>
 8003904:	4603      	mov	r3, r0
 8003906:	70fb      	strb	r3, [r7, #3]
        if (cChar == '\n')
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b0a      	cmp	r3, #10
 800390e:	d10c      	bne.n	800392a <UARTStdioIntHandler+0x6e>
        {
            data_uart_1.uart_buffer[data_uart_1.position_uart] = '\0';
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 8003912:	7a9b      	ldrb	r3, [r3, #10]
 8003914:	461a      	mov	r2, r3
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]
            data_uart_1.uart_flag = 1;
 800391c:	4b0e      	ldr	r3, [pc, #56]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 800391e:	2201      	movs	r2, #1
 8003920:	72da      	strb	r2, [r3, #11]
            data_uart_1.position_uart = 0;
 8003922:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 8003924:	2200      	movs	r2, #0
 8003926:	729a      	strb	r2, [r3, #10]
        {
			data_uart_1.uart_buffer[data_uart_1.position_uart] = cChar;
			data_uart_1.position_uart++;
        }
    }
}
 8003928:	e00b      	b.n	8003942 <UARTStdioIntHandler+0x86>
			data_uart_1.uart_buffer[data_uart_1.position_uart] = cChar;
 800392a:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 800392c:	7a9b      	ldrb	r3, [r3, #10]
 800392e:	461a      	mov	r2, r3
 8003930:	78f9      	ldrb	r1, [r7, #3]
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 8003934:	5499      	strb	r1, [r3, r2]
			data_uart_1.position_uart++;
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 8003938:	7a9b      	ldrb	r3, [r3, #10]
 800393a:	3301      	adds	r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <UARTStdioIntHandler+0x9c>)
 8003940:	729a      	strb	r2, [r3, #10]
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000455c 	.word	0x2000455c
 8003950:	200045e4 	.word	0x200045e4
 8003954:	200045e8 	.word	0x200045e8
 8003958:	20000030 	.word	0x20000030

0800395c <memcmp>:
 800395c:	b510      	push	{r4, lr}
 800395e:	3901      	subs	r1, #1
 8003960:	4402      	add	r2, r0
 8003962:	4290      	cmp	r0, r2
 8003964:	d101      	bne.n	800396a <memcmp+0xe>
 8003966:	2000      	movs	r0, #0
 8003968:	e005      	b.n	8003976 <memcmp+0x1a>
 800396a:	7803      	ldrb	r3, [r0, #0]
 800396c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003970:	42a3      	cmp	r3, r4
 8003972:	d001      	beq.n	8003978 <memcmp+0x1c>
 8003974:	1b18      	subs	r0, r3, r4
 8003976:	bd10      	pop	{r4, pc}
 8003978:	3001      	adds	r0, #1
 800397a:	e7f2      	b.n	8003962 <memcmp+0x6>

0800397c <memset>:
 800397c:	4402      	add	r2, r0
 800397e:	4603      	mov	r3, r0
 8003980:	4293      	cmp	r3, r2
 8003982:	d100      	bne.n	8003986 <memset+0xa>
 8003984:	4770      	bx	lr
 8003986:	f803 1b01 	strb.w	r1, [r3], #1
 800398a:	e7f9      	b.n	8003980 <memset+0x4>

0800398c <__libc_init_array>:
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4d0d      	ldr	r5, [pc, #52]	@ (80039c4 <__libc_init_array+0x38>)
 8003990:	4c0d      	ldr	r4, [pc, #52]	@ (80039c8 <__libc_init_array+0x3c>)
 8003992:	1b64      	subs	r4, r4, r5
 8003994:	10a4      	asrs	r4, r4, #2
 8003996:	2600      	movs	r6, #0
 8003998:	42a6      	cmp	r6, r4
 800399a:	d109      	bne.n	80039b0 <__libc_init_array+0x24>
 800399c:	4d0b      	ldr	r5, [pc, #44]	@ (80039cc <__libc_init_array+0x40>)
 800399e:	4c0c      	ldr	r4, [pc, #48]	@ (80039d0 <__libc_init_array+0x44>)
 80039a0:	f000 f826 	bl	80039f0 <_init>
 80039a4:	1b64      	subs	r4, r4, r5
 80039a6:	10a4      	asrs	r4, r4, #2
 80039a8:	2600      	movs	r6, #0
 80039aa:	42a6      	cmp	r6, r4
 80039ac:	d105      	bne.n	80039ba <__libc_init_array+0x2e>
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b4:	4798      	blx	r3
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7ee      	b.n	8003998 <__libc_init_array+0xc>
 80039ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80039be:	4798      	blx	r3
 80039c0:	3601      	adds	r6, #1
 80039c2:	e7f2      	b.n	80039aa <__libc_init_array+0x1e>
 80039c4:	08003a64 	.word	0x08003a64
 80039c8:	08003a64 	.word	0x08003a64
 80039cc:	08003a64 	.word	0x08003a64
 80039d0:	08003a68 	.word	0x08003a68

080039d4 <memcpy>:
 80039d4:	440a      	add	r2, r1
 80039d6:	4291      	cmp	r1, r2
 80039d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039dc:	d100      	bne.n	80039e0 <memcpy+0xc>
 80039de:	4770      	bx	lr
 80039e0:	b510      	push	{r4, lr}
 80039e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d1f9      	bne.n	80039e2 <memcpy+0xe>
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <_init>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr

080039fc <_fini>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr
